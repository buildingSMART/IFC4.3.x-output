# Industry Foundation Classes IFC.
# Copyright (C) 2020 buildingSMART
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2020-09-25 10:09+0200\n"
"X-Crowdin-SourceKey: msgstr\n"
"Language-Team: buildingSMART community\n"

#:IFC.xml:25371
msgid "IfcBlobTexture"
msgstr "IfcBlobTexture"

msgid "IfcBlobTexture_DEFINITION"
msgstr "An [[IfcBlobTexture]] provides a 2 dimensional distribution of the lighting parameters of a surface onto which it is mapped. The texture itself is given as a single binary blob, representing the content of a pixel format file. The file format of the pixel file is given by the RasterFormat attribute and allowable formats are guided by where rule SupportedRasterFormat . NOTE Toolbox specific implementations of the binary datatype may restrict the maximum length of the binary blob to capture the raster file content. For interpretation of the texture nodes see [[IfcImageTexture]] definition. HISTORY New entity in IFC2x3. .change ifc2x4 IFC4 CHANGE Data type of RasterCode has been corrected to BINARY."

#:IFC.xml:25372
msgid "IfcBlobTexture_RasterCode"
msgstr "RasterCode"

msgid "IfcBlobTexture_RasterCode_DEFINITION"
msgstr "Blob, given as a single binary, to capture the texture within one popular file compression format. The file format is provided by the RasterFormat attribute. Formal Propositions"

#:IFC.xml:25377
msgid "IfcBlobTexture_RasterFormat"
msgstr "RasterFormat"

msgid "IfcBlobTexture_RasterFormat_DEFINITION"
msgstr "The format of the RasterCode often using a compression."

#:IFC.xml:25384
msgid "IfcColour"
msgstr "IfcColour"

msgid "IfcColour_DEFINITION"
msgstr ""

#:IFC.xml:25386
msgid "IfcColourOrFactor"
msgstr "IfcColourOrFactor"

msgid "IfcColourOrFactor_DEFINITION"
msgstr ""

#:IFC.xml:25387
msgid "IfcColourRgb"
msgstr "IfcColourRgb"

msgid "IfcColourRgb_DEFINITION"
msgstr ".extDef NOTE Definition according to ISO CD 10303 46 1992 A colour rgb as a subtype of colour specifications is defined by three colour component values for red, green, and blue in the RGB colour model. NOTE In contrary to the usual value range of colour components being integer from 0...255, the definition from ISO10303 46 defines the colour components as real from 0.0 ... 1.0. Applications need to execute this conversion before populating the colour RGB values. NOTE Corresponding STEP name colour rgb. The name attribute has been omitted, the data type for the reg, green and blue parts is IfcNormalizedRatioMeasure , that already includes the range restrictions for the values. Please refer to ISO IS 10303 46 1994, p. 138 for the final definition of the formal standard. HISTORY New entity in IFC2x2."

#:IFC.xml:25388
msgid "IfcColourRgb_Blue"
msgstr "Blue"

msgid "IfcColourRgb_Blue_DEFINITION"
msgstr "The intensity of the blue colour component. NOTE The colour component value is given within the range of 0..1, and not within the range of 0..255 as otherwise usual."

#:IFC.xml:25393
msgid "IfcColourRgb_Green"
msgstr "Green"

msgid "IfcColourRgb_Green_DEFINITION"
msgstr "The intensity of the green colour component. NOTE The colour component value is given within the range of 0..1, and not within the range of 0..255 as otherwise usual."

#:IFC.xml:25398
msgid "IfcColourRgb_Red"
msgstr "Red"

msgid "IfcColourRgb_Red_DEFINITION"
msgstr "The intensity of the red colour component. NOTE The colour component value is given within the range of 0..1, and not within the range of 0..255 as otherwise usual."

#:IFC.xml:25490
msgid "IfcColourRgbList"
msgstr "IfcColourRgbList"

msgid "IfcColourRgbList_DEFINITION"
msgstr "The [[IfcColourRgbList]] defines an ordered collection of RGB colour values. Each colour value is a fixed list of three colour components red, green, blue . The attribute ColourList is a two dimensional list, where first dimension is an unbounded list representing each colour value second dimension is a fixed list of four list members, where 1 is the red component, 2 the green component, and 3 the blue component. NOTE The [[IfcColourRgbList]] is introduced to provide a compact representation of an indexable representation of colours for tessellated items. HISTORY New entity in IFC4."

#:IFC.xml:25491
msgid "IfcColourRgbList_ColourList"
msgstr "ColourList"

msgid "IfcColourRgbList_ColourList_DEFINITION"
msgstr "List of colours defined by the red, green, blue components. All values are provided as a ratio of 0.0 value 1.0. When using 8bit for each colour channel, a value of 0.0 equals 0, a value of 1.0 equals 255, and values between are interpolated."

#:IFC.xml:25510
msgid "IfcColourSpecification"
msgstr "IfcColourSpecification"

msgid "IfcColourSpecification_DEFINITION"
msgstr ".extDef NOTE Definition according to ISO CD 10303 46 1992 The colour specification entity contains a direct colour definition. Colour component values refer directly to a specific colour space. NOTE Corresponding ISO 10303 name colour specification. It has been made into an abstract entity in IFC. Please refer to ISO IS 10303 46 1994, p. 138 for the final definition of the formal standard. HISTORY New entity in IFC2x2."

#:IFC.xml:25511
msgid "IfcColourSpecification_Name"
msgstr "Name"

msgid "IfcColourSpecification_Name_DEFINITION"
msgstr "Optional name given to a particular colour specification in addition to the colour components like the RGB values . EXAMPLE Names of a industry colour classification, such as RAL. .change ifc2x3 IFC2x3 CHANGE Attribute added."

#:IFC.xml:25519
msgid "IfcCorrectFillAreaStyle"
msgstr "IfcCorrectFillAreaStyle"

msgid "IfcCorrectFillAreaStyle_DEFINITION"
msgstr ""

#:IFC.xml:25527
msgid "IfcCurveFontOrScaledCurveFontSelect"
msgstr "IfcCurveFontOrScaledCurveFontSelect"

msgid "IfcCurveFontOrScaledCurveFontSelect_DEFINITION"
msgstr ""

#:IFC.xml:25528
msgid "IfcCurveStyle"
msgstr "IfcCurveStyle"

msgid "IfcCurveStyle_DEFINITION"
msgstr "An [[IfcCurveStyle]] provides the style table for presentation information assigned to geometric curves. The style is defined by a color, a font and a width. The [[IfcCurveStyle]] defines curve patterns as model patterns, that is, the distance between visible and invisible segments of curve patterns are given in model space dimensions that have to be scaled using the target plot scale . Styles are intended to be shared by multiple [[IfcStyledItem]] s, assigning the style to occurrences of subtypes of [[IfcGeometricRepresentationItem]] s. Measures given to a font pattern or a curve width are given in global drawing length units. NOTE global units are defined at the single [[IfcProject]] instance, given by UnitsInContext [[IfcUnitAssignment]] , the same units are used for the geometric representation items and for the style definitions. The measure values for font pattern and curve width apply to the model space with a target plot scale provided for the correct appearance in the default plot scale.. For different scale and projection dependent curve styles a different instance of [[IfcCurveStyle]] needs to be used by IfcPresentationStyleAssignment for different [[IfcGeometricRepresentationSubContext]] dependent representations. NOTE the target plot scale is given by [[IfcGeometricRepresentationSubContext]].TargetScale . An [[IfcCurveStyle]] can be assigned to [[IfcGeometricRepresentationItem]] s via the IfcPresentationStyleAssignment through an intermediate [[IfcStyledItem]] or IfcAnnotationCurveOccurrence . .extDef NOTE Definition according to ISO CD 10303 46 1992 A curve style specifies the visual appearance of curves. NOTE Corresponding ISO 10303 name curve style. Please refer to ISO IS 10303 46 1994 for the final definition of the formal standard. HISTORY New entity in IFC2x2."

#:IFC.xml:25529
msgid "IfcCurveStyle_CurveColour"
msgstr "CurveColour"

msgid "IfcCurveStyle_CurveColour_DEFINITION"
msgstr "The colour of the visible part of the curve. If not given, then the colour should be taken from the layer assignment with style, if that is not given either, then the default colour applies."

#:IFC.xml:25534
msgid "IfcCurveStyle_CurveFont"
msgstr "CurveFont"

msgid "IfcCurveStyle_CurveFont_DEFINITION"
msgstr "A curve style font which is used to present a curve. It can either be a predefined curve font, or an explicitly defined curve font. Both may be scaled. If not given, then the curve font should be taken from the layer assignment with style, if that is not given either, then the default curve font applies."

#:IFC.xml:25539
msgid "IfcCurveStyle_CurveWidth"
msgstr "CurveWidth"

msgid "IfcCurveStyle_CurveWidth_DEFINITION"
msgstr "A positive length measure in units of the presentation area for the width of a presented curve. If not given, then the style should be taken from the layer assignment with style, if that is not given either, then the default style applies."

#:IFC.xml:25544
msgid "IfcCurveStyle_ModelOrDraughting"
msgstr "ModelOrDraughting"

msgid "IfcCurveStyle_ModelOrDraughting_DEFINITION"
msgstr "Indication whether the length measures provided for the presentation style are model based, or draughting based. .change ifc2x4 IFC4 CHANGE New attribute. Formal Propositions"

#:IFC.xml:25563
msgid "IfcCurveStyleFont"
msgstr "IfcCurveStyleFont"

msgid "IfcCurveStyleFont_DEFINITION"
msgstr ".extDef NOTE Definition according to ISO CD 10303 46 1992 A curve style font combines several curve style font pattern entities into a more complex pattern. The resulting pattern is repeated along the curve. NOTE Corresponding ISO 10303 name curve style font. Please refer to ISO IS 10303 46 1994 for the final definition of the formal standard. HISTORY New entity in IFC2x2."

#:IFC.xml:25572
msgid "IfcCurveStyleFont_PatternList"
msgstr "PatternList"

msgid "IfcCurveStyleFont_PatternList_DEFINITION"
msgstr "A list of curve font pattern entities, that contains the simple patterns used for drawing curves. The patterns are applied in the order they occur in the list."

#:IFC.xml:25564
msgid "IfcCurveStyleFont_Name"
msgstr "Name"

msgid "IfcCurveStyleFont_Name_DEFINITION"
msgstr "Name that may be assigned with the curve font."

#:IFC.xml:25584
msgid "IfcCurveStyleFontAndScaling"
msgstr "IfcCurveStyleFontAndScaling"

msgid "IfcCurveStyleFontAndScaling_DEFINITION"
msgstr "The [[IfcCurveStyleFontAndScaling]] allows for the reuse of the same curve style definition in several sizes. The definition of the CurveFontScale is the scaling of a base curve style pattern to be used as a new or derived curve style pattern. NOTE The CurveFontScale should not be mixed up with the target plot scale. An example for [[IfcCurveStyleFontAndScaling]] is the sizing of a basic curve style dash pattern dash visible 0.01m, invisible 0.005m into dash large with CurveFontScale 2 resulting in visible 0.02m, invisible 0.01m , and into dash small with CurveFontScale 0.5 resulting in visible 0.005m, invisible 0.0025m . .extDef NOTE Definition according to ISO CD 10303 46 1992 A curve style font and scaling is a curve style font and a scalar factor for that font, so that a given curve style font may be applied at various scales. NOTE Corresponding ISO 10303 name curve style font and scaling. Please refer to ISO IS 10303 46 1994 for the final definition of the formal standard. HISTORY New entity in IFC2x2."

#:IFC.xml:25585
msgid "IfcCurveStyleFontAndScaling_CurveFontScaling"
msgstr "CurveFontScaling"

msgid "IfcCurveStyleFontAndScaling_CurveFontScaling_DEFINITION"
msgstr "The scale factor."

#:IFC.xml:25590
msgid "IfcCurveStyleFontAndScaling_CurveStyleFont"
msgstr "CurveStyleFont"

msgid "IfcCurveStyleFontAndScaling_CurveStyleFont_DEFINITION"
msgstr "CurveStyleFont"

#:IFC.xml:25595
msgid "IfcCurveStyleFontAndScaling_Name"
msgstr "Name"

msgid "IfcCurveStyleFontAndScaling_Name_DEFINITION"
msgstr "Name that may be assigned with the scaling of a curve font."

#:IFC.xml:25603
msgid "IfcCurveStyleFontPattern"
msgstr "IfcCurveStyleFontPattern"

msgid "IfcCurveStyleFontPattern_DEFINITION"
msgstr ".extDef NOTE Definition according to ISO CD 10303 46 1992 A curve style font pattern is a pair of visible and invisible curve segment length measures in presentation area units. NOTE Corresponding ISO 10303 name curve style font pattern. Please refer to ISO IS 10303 46 1994 for the final definition of the formal standard. HISTORY New entity in IFC2x2."

#:IFC.xml:25604
msgid "IfcCurveStyleFontPattern_InvisibleSegmentLength"
msgstr "InvisibleSegmentLength"

msgid "IfcCurveStyleFontPattern_InvisibleSegmentLength_DEFINITION"
msgstr "The length of the invisible segment in the pattern definition. Formal Propositions"

#:IFC.xml:25609
msgid "IfcCurveStyleFontPattern_VisibleSegmentLength"
msgstr "VisibleSegmentLength"

msgid "IfcCurveStyleFontPattern_VisibleSegmentLength_DEFINITION"
msgstr "The length of the visible segment in the pattern definition. NOTE For a visible segment representing a point, the value 0. should be assigned. .change ifc2x3 IFC2x3 CHANGE The datatype has been changed to [[IfcLengthMeasure]] with upward compatibility for file based exchange."

#:IFC.xml:25616
msgid "IfcCurveStyleFontSelect"
msgstr "IfcCurveStyleFontSelect"

msgid "IfcCurveStyleFontSelect_DEFINITION"
msgstr ""

#:IFC.xml:25618
msgid "IfcDraughtingPreDefinedColour"
msgstr "IfcDraughtingPreDefinedColour"

msgid "IfcDraughtingPreDefinedColour_DEFINITION"
msgstr "The draughting pre defined colour is a pre defined colour for the purpose to identify a colour by name. Allowable names are black , red , green , blue , yellow , magenta , cyan , white , by layer NOTE The [[IfcDraughtingPreDefinedColour]] is an entity that had been adopted from ISO 10303 202, Industrial automation systems and integration Product data representation and exchange, Part 202 Application protocol Associative draughting. The following table states the RGB values associated with the names given by the [[IfcDraughtingPreDefinedColour]]. Colour name Red Green Blue black 0 0 0 red 1.0 0 0 green 0 1.0 0 blue 0 0 1.0 yellow 1.0 1.0 0 magenta 1.0 0 1.0 cyan 0 1.0 1.0 white 1.0 1.0 1.0 by layer colour values obtained from [[IfcPresentationLayerWithStyle]]. NOTE Corresponding ISO 10303 name draughting pre defined colour. Please refer to ISO IS 10303 202 1994 page 194 for the final definition of the formal standard. HISTORY New entity in IFC2x2. .spec head Informal Propositions 1. The value by layer shall only be inserted, if the geometric representation item using the colour definition has an association to [[IfcPresentationLayerWithStyle]] , and if that instance of [[IfcPresentationLayerWithStyle]] has a valid colour definition for [[IfcCurveStyle]] , IfcSymbolStyle , or [[IfcSurfaceStyle]] depending on what is applicable . Formal Propositions PreDefinedColourNames The inherited name for pre defined items shall only have the value of one of the following words."

#:IFC.xml:25621
msgid "IfcDraughtingPreDefinedCurveFont"
msgstr "IfcDraughtingPreDefinedCurveFont"

msgid "IfcDraughtingPreDefinedCurveFont_DEFINITION"
msgstr "The draughting predefined curve font type defines a selection of widely used curve fonts for draughting purposes by name. NOTE The [[IfcDraughtingPreDefinedCurveFont]] is an entity that had been adopted from ISO 10303, Industrial automation systems and integration Product data representation and exchange, Part 46 Technical Corrigendum 2 Integrated generic resources Visual presentation. Figure 1 illustrates predefined curve fonts. predefined fonts .. .. .. .. figures ifcdraughtingpredefinedcurvefont fig1.gif Figure 1 Draughting predefined curve font NOTE If the [[IfcDraughtingPreDefinedCurveFont]] is used within an [[IfcCurveStyleFontAndScaling]] then the segment and space lengths that are given in the table are as such for the scale factor 1.0 NOTE Corresponding ISO 10303 name pre defined curve font. Please refer to ISO IS 10303 46 1994 TC2, page 12 for the final definition of the formal standard. HISTORY New entity in IFC2x2. Formal Propositions PreDefinedCurveFontNames The name of the [[IfcDraughtingPreDefinedCurveFont]] shall be continuous , chain , chain double dash , dashed , dotted or by layer ."

#:IFC.xml:25624
msgid "IfcExternallyDefinedHatchStyle"
msgstr "IfcExternallyDefinedHatchStyle"

msgid "IfcExternallyDefinedHatchStyle_DEFINITION"
msgstr ".extDef NOTE Definition according to ISO CD 10303 46 1992 The externally defined hatch style is an entity which makes an external reference to a hatching style. NOTE The allowable values for the name source and item reference, by which the externally defined hatch style is identified, need to be determined by implementer agreements. NOTE Corresponding ISO 10303 name fill style select. Please refer to ISO IS 10303 46 1994 for the final definition of the formal standard. HISTORY New entity in IFC2x2."

#:IFC.xml:25628
msgid "IfcExternallyDefinedSurfaceStyle"
msgstr "IfcExternallyDefinedSurfaceStyle"

msgid "IfcExternallyDefinedSurfaceStyle_DEFINITION"
msgstr "[[IfcExternallyDefinedSurfaceStyle]] is a definition of a surface style through referencing an external source, such as a material library for rendering information. NOTE In order to achieve expected results, the externally defined surface style should normally only be given in addition to an explicitly defined surface styles. HISTORY New entity in IFC2x2. .change ifc2x3 IFC2x3 CHANGE The spelling has been corrected from IfcExternallyDefinedSufaceStyle with no upward compatibility."

#:IFC.xml:25632
msgid "IfcExternallyDefinedTextFont"
msgstr "IfcExternallyDefinedTextFont"

msgid "IfcExternallyDefinedTextFont_DEFINITION"
msgstr ".extDef NOTE Definition according to ISO CD 10303 46 1992 The externally defined text font is an external reference to a text font NOTE Restrictions of the font source and font names to be used may be exposed by implementation guidelines. NOTE Corresponding ISO 10303 name externally defined text font. Please refer to ISO IS 10303 46 1994, p. 137 for the final definition of the formal standard. HISTORY New entity in IFC2x2."

#:IFC.xml:25636
msgid "IfcFillAreaStyle"
msgstr "IfcFillAreaStyle"

msgid "IfcFillAreaStyle_DEFINITION"
msgstr "An [[IfcFillAreaStyle]] provides the style table for presentation information assigned to annotation fill areas or surfaces for hatching and tiling. The [[IfcFillAreaStyle]] defines hatches as model hatches, that is, the distance between hatch lines, or the curve patterns of hatch lines are given in model space dimensions that have to be scaled using the target plot scale . The [[IfcFillAreaStyle]] allows for the following combinations of defining the style of hatching and tiling Solid fill for areas and surfaces by only assigning [[IfcColour]] to the set of FillStyles . It then provides the background colour for the filled area or surface. NOTE Color information of surfaces for rendering is assigned by using [[IfcSurfaceStyle]] , not by using [[IfcFillAreaStyle]] . Vector based hatching for areas and surfaces based on a single row of hatch lines by assigning a single instance of [[IfcFillAreaStyleHatching]] to the set of FillStyles . If an instance of [[IfcColour]] is assigned in addition to the set of FillStyles , it provides the background colour for the hatching. Vector based hatching for areas and surfaces based on two potentially crossing rows of hatch lines by assigning two instances of [[IfcFillAreaStyleHatching]] to the set of FillStyles. If an instance of [[IfcColour]] is assigned in addition to the set of FillStyles , it provides the background colour for the hatching. NOTE Assigning more then two instances of [[IfcFillAreaStyleHatching]] to define three or more rows of hatch lines is not encouraged. Tiling for areas and surfaces by assigning a single instance of [[IfcFillAreaStyleTiles]] to the set of FillStyles . If an instance of [[IfcColour]] is assigned in addition to the set of FillStyles , it provides the background colour for the tiling. Externally defined hatch style by assigning a single instance of [[IfcExternallyDefinedHatchStyle]] to the set of FillStyles . If an instance of [[IfcColour]] is assigned in addition to the set of FillStyles , it provides the background colour for the hatching. Measures given to a hatch or tile pattern are given in global drawing length units. NOTE Global units are defined at the single [[IfcProject]] instance, given by UnitsInContext [[IfcUnitAssignment]] , the same units are used for the geometric representation items and for the style definitions. The measure values for hatch or tile pattern apply to the model space with a target plot scale provided for the correct appearance in the default plot scale. For different scale and projection dependent fill area styles a different instance of [[IfcFillAreaStyle]] needs to be used by IfcPresentationStyleAssignment for different [[IfcGeometricRepresentationSubContext]] dependent representations. NOTE the target plot scale is given by [[IfcGeometricRepresentationSubContext]].TargetScale . An [[IfcFillAreaStyle]] can be assigned to IfcFillArea via the IfcPresentationStyleAssignment through an intermediate [[IfcStyledItem]] or subtype IfcAnnotationFillAreaOccurrence . .extDef NOTE Definition according to ISO CD 10303 46 1992 The style for filling visible curve segments, annotation fill areas or surfaces with tiles or hatches. NOTE Corresponding ISO 10303 name fill area style. Please refer to ISO IS 10303 46 1994 for the final definition of the formal standard. HISTORY New entity in IFC2x2. .deprecated DEPRECATION The use of [[IfcFillAreaStyleTiles]] is deprecated, as its definition might change is future releases."

#:IFC.xml:25637
msgid "IfcFillAreaStyle_FillStyles"
msgstr "FillStyles"

msgid "IfcFillAreaStyle_FillStyles_DEFINITION"
msgstr "The set of fill area styles to use in presenting visible curve segments, annotation fill areas or surfaces."

#:IFC.xml:25642
msgid "IfcFillAreaStyle_ModelOrDraughting"
msgstr "ModelOrDraughting"

msgid "IfcFillAreaStyle_ModelOrDraughting_DEFINITION"
msgstr "Indication whether the length measures provided for the presentation style are model based, or draughting based. .change ifc2x4 IFC4 CHANGE New attribute. Formal Propositions"

#:IFC.xml:25649
msgid "IfcFillAreaStyleHatching"
msgstr "IfcFillAreaStyleHatching"

msgid "IfcFillAreaStyleHatching_DEFINITION"
msgstr "The [[IfcFillAreaStyleHatching]] is used to define simple, vector based hatching patterns, based on styled straight lines. The curve font, color and thickness is given by the HatchLineAppearance , the angle by the HatchLineAngle and the distance to the next hatch line by StartOfNextHatchLine , being either an offset distance or a vector. .extDef NOTE Definition according to ISO 10303 46 The fill area style hatching defines a styled pattern of curves for hatching an annotation fill area or a surface. NOTE If the hatch pattern involves two potentially crossing rows of hatch lines, then two instances of [[IfcFillAreaStyleHatching]] should be assigned to the [[IfcFillAreaStyle]] . Both share the same virtual point of origin of the hatching that is used by the reference hatch line or the PointOfReferenceHatchLine if there is an offset . For better control of the hatching appearance, when using hatch lines with other fonts then continuous, the PatternStart allows to offset the start of the curve font pattern along the reference hatch line if not given, the PatternStart is at zero distance from the virtual point of origin . If the reference hatch line does not go through the origin of the virtual hatching coordinate system , it can be offset by using the PatternStart . NOTE The coordinates of the PatternStart are given relative to the origin of the object coordinate of [[IfcAnnotationFillArea]] , or if present, the FillAreaTarget attribute of [[IfcAnnotationFillArea]] . The measure values are given in global drawing length units, representing a model hatching, and can be translated into drawing units by the TargetScale for a scale depended IfcGeometricRepresentationSubcontext , if provided. .deprecated DEPRECATION The use of PointOfReferenceHatchLine is deprecated. Figure 1 illustrates hatch attributes. Example 1 This example shows simple hatching given by using a curve font continuous at HatchLineAppearance. The distance of hatch lines is given by a positive length measure. The angle here 45 if measures in degree is provided by HatchLineAngle. The PatternStart is set to NIL in this example. Example 2 This shows hatching from example 1 with using a different curve font at HatchLineAppearance. The distance of hatch lines is given by a positive length measure, therefore the font pattern start is at a point at the next hatch line given by a vector being perpendicular to the point of origin at the reference hatch line. The PatternStart is set to NIL in this example. Example 3 This example uses hatching from example 2 with a vector to determine the pattern start of the next hatch lines. The pattern start is the beginning of the first visual curve font pattern segment at IfcCurveFont.CurveFont. The PatternStart is set to NIL in this example. Example 4 This example uses hatching from example 3 where the pattern start is offset from the point of origin at the reference hatch line. That is, the first visible curve font pattern segment now does not start at the point of origin at the reference hatch line. Example 5 This example uses hatching from example 4 where the hatch pattern is shifted against the underlying coordinate system. The point that is mapped to the insertion point of the IfcAnnotationFillAreaOccurrence now has an X and Y offset from the start of the reference hatch line. That is, the reference hatch line now does not go through the insertion point of the hatching. Example 6 This example shows use of [[IfcFillAreaStyleHatching]] attributes for two [[IfcFillAreaStyleHatching]] s within one [[IfcFillAreaStyle]]. Note that the PatternStart now displaces both the reference hatch line from the point of origin and the start of the curve pattern. This can be used in cases when more than one [[IfcFillAreaStyleHatching]] is used in an [[IfcFillAreaStyle]] in order to place rows of hatch lines with an offset from each other. Figure 1 Fill area style hatching NOTE Entity adapted from fill area style hatching defined in ISO10303 46 HISTORY New entity in IFC2x2. .change ifc2x3 IFC2x3 CHANGE The [[IfcFillAreaStyleHatching]] has been changed by making the attributes PatternStart and PointOfReferenceHatchLine OPTIONAL. The attribute StartOfNextHatchLine has changed to a SELECT with the additional choice of [[IfcPositiveLengthMeasure]] . Upward compatibility for file based exchange is guaranteed. .change ifc2x4 IFC4 CHANGE The attribute data type for StartOfNextHatchLine has been changed to be a select of [[IfcPositiveLengthMeasure]] and [[IfcVector]] ."

#:IFC.xml:11249
msgid "IfcFillAreaStyleHatching_PointOfReferenceHatchLine"
msgstr "PointOfReferenceHatchLine"

msgid "IfcFillAreaStyleHatching_PointOfReferenceHatchLine_DEFINITION"
msgstr "A Cartesian point which defines the offset of the reference hatch line from the origin of the virtual hatching coordinate system. The origin is used for mapping the fill area style hatching onto an annotation fill area or surface. The reference hatch line would then appear with this offset from the fill style target point. If not given the reference hatch lines goes through the origin of the virtual hatching coordinate system. .change ifc2x3 IFC2x3 CHANGE The usage of the attribute PointOfReferenceHatchLine has changed to not provide the Cartesian point which is the origin for mapping, but to provide an offset to the origin for the mapping. The attribute has been made OPTIONAL."

#:IFC.xml:11261
msgid "IfcFillAreaStyleHatching_PatternStart"
msgstr "PatternStart"

msgid "IfcFillAreaStyleHatching_PatternStart_DEFINITION"
msgstr "A distance along the reference hatch line which is the start point for the curve style font pattern of the reference hatch line. If not given, the start point of the curve style font pattern is at the virtual hatching coordinate system. .change ifc2x2 IFC2x2 Add2 CHANGE The attribute PatternStart has been made OPTIONAL."

#:IFC.xml:25551
msgid "IfcFillAreaStyleHatching_HatchLineAppearance"
msgstr "HatchLineAppearance"

msgid "IfcFillAreaStyleHatching_HatchLineAppearance_DEFINITION"
msgstr "The curve style of the hatching lines. Any curve style pattern shall start at the origin of each hatch line."

#:IFC.xml:25650
msgid "IfcFillAreaStyleHatching_HatchLineAngle"
msgstr "HatchLineAngle"

msgid "IfcFillAreaStyleHatching_HatchLineAngle_DEFINITION"
msgstr "A plane angle measure determining the direction of the parallel hatching lines. Formal Propositions"

#:IFC.xml:25655
msgid "IfcFillAreaStyleHatching_StartOfNextHatchLine"
msgstr "StartOfNextHatchLine"

msgid "IfcFillAreaStyleHatching_StartOfNextHatchLine_DEFINITION"
msgstr "A repetition factor that determines the distance between adjacent hatch lines. The factor can either be defined by a parallel offset, or by a repeat factor provided by [[IfcVector]] . .change ifc2x3 IFC2x3 CHANGE The attribute type of StartOfNextHatchLine has changed to a SELECT of [[IfcPositiveLengthMeasure]] new and IfcOneDirectionRepeatFactor . .change ifc2x4 IFC4 CHANGE The attribute type of StartOfNextHatchLine has changed to a SELECT of [[IfcPositiveLengthMeasure]] new and [[IfcVector]] ."

#:IFC.xml:25663
msgid "IfcFillAreaStyleTiles"
msgstr "IfcFillAreaStyleTiles"

msgid "IfcFillAreaStyleTiles_DEFINITION"
msgstr "The [[IfcFillAreaStyleTiles]] defines the filling of an [[IfcAnnotationFillArea]] by recurring patterns of styled two dimensional geometry, called a tile. The recurrence pattern is determined by two vectors, that multiply the tile in regular form. The two vectors act as a two dimensional repeat factor that determins eight new positions for the tiles. .extDef NOTE Definition according to ISO 10303 46 The fill area style tiles defines a two dimensional tile to be used for the filling of annotation fill areas or other closed regions. The content of a tile is defined by the tile set, and the placement of each tile determined by the filling pattern which indicates how to place tiles next to each other. Tiles or parts of tiles outside of the annotation fill area or closed region shall be clipped at the of the area or region. .extDef I k 1 R 1 k 2 R 2 k 1 ,k 2 1,0,1 , formula .. .. .. .. figures ifcfillareastyletilesymbolwithstyle fig1.gif Figure 1 shows the use of a vector for hatch line distances [[IfcFillAreaStyleTiles]] Fig1.gif 12,9 KB .. .. .. .. figures ifcfillareastyletiles fig1.gif Figure 1 two vectors as two direction repeat factor NOTE Entity adapted from fill area style tiles defined in ISO10303 46 HISTORY New entity in IFC2x2. .change ifc2x4 IFC4 CHANGE TilingPattern changed to list of two [[IfcVector]] , Tiles refer directly to [[IfcStyledItem]] ."

#:IFC.xml:12873
msgid "IfcFillAreaStyleTiles_TilingPattern"
msgstr "TilingPattern"

msgid "IfcFillAreaStyleTiles_TilingPattern_DEFINITION"
msgstr "A two direction repeat factor defining the shape and relative positioning of the tiles. .change ifc2x4 IFC4 CHANGE The attribute type has changed to directly reference two [[IfcVector]] s."

#:IFC.xml:25672
msgid "IfcFillAreaStyleTiles_Tiles"
msgstr "Tiles"

msgid "IfcFillAreaStyleTiles_Tiles_DEFINITION"
msgstr "A set of constituents of the tile being a styled item that is used as the annotation symbol for tiling the filled area. .change ifc2x4 IFC4 CHANGE The data type has been changed to [[IfcStyledItem]] . NOTE Only IfcStyleItem s that refer to a compatible geometric representation item and presentation style shall be used."

#:IFC.xml:25664
msgid "IfcFillAreaStyleTiles_TilingScale"
msgstr "TilingScale"

msgid "IfcFillAreaStyleTiles_TilingScale_DEFINITION"
msgstr "The scale factor applied to each tile as it is placed in the annotation fill area."

#:IFC.xml:25684
msgid "IfcFillStyleSelect"
msgstr "IfcFillStyleSelect"

msgid "IfcFillStyleSelect_DEFINITION"
msgstr ""

#:IFC.xml:25685
msgid "IfcHatchLineDistanceSelect"
msgstr "IfcHatchLineDistanceSelect"

msgid "IfcHatchLineDistanceSelect_DEFINITION"
msgstr ""

#:IFC.xml:25686
msgid "IfcImageTexture"
msgstr "IfcImageTexture"

msgid "IfcImageTexture_DEFINITION"
msgstr "An [[IfcImageTexture]] provides a 2 dimensional texture that can be applied to a surface of an geometric item and that provides lighting parameters of a surface onto which it is mapped. The texture is provided as an image file at an external location for which an URL is provided. The following definitions from ISO IEC 19775 1 X3D Architecture and base components X3D Specification http www.web3d.org x3d specifications apply Greyscale pixels without alpha or simple transparency are treated as intensity textures. Greyscale pixels with alpha or simple transparency are treated as intensity plus alpha textures. RGB pixels without alpha channel or simple transparency are treated as full RGB textures. RGB pixels with alpha channel or simple transparency are treated as full RGB plus alpha textures. If the image specifies colours as indexed colour that is, palettes or colourmaps , the following semantics should be used note that greyscale refers to a palette entry with equal red, green, and blue values 1. If all the colours in the palette are greyscale and there is no transparency chunk, it is treated as an intensity texture. 2. If all the colours in the palette are greyscale and there is a transparency chunk, it is treated as an intensity plus opacity texture. 3. If any colour in the palette is not grey and there is no transparency chunk, it is treated as a full RGB texture. 4. If any colour in the palette is not grey and there is a transparency chunk, it is treated as a full RGB plus alpha texture. Texture nodes that require support for JPEG files shall interpret JPEG files as follows 1. Greyscale files number of components equals 1 are treated as intensity textures. 2. YCbCr files are treated as full RGB textures. 3. No other JPEG file types are required. It is recommended that other JPEG files are treated as a full RGB textures. Texture nodes that recommend support for GIF files shall follow the applicable semantics described above for the PNG format. The Uniform Resource Locator URL is a form of an URI and specified in RFC1738 http www.ietf.org rfc rfc1738.txt number 1738 by IETF. It supports resources located on a particular server being accessed by a particular protocol usually http , and resources located at a local machine. NOTE Exchange files following the ifcZIP convention may include a sub directory structure for image resources to be stored together with the product data set. NOTE The definitions of texturing within this standard have been developed in dependence on the texture component of X3D. See ISO IEC 19775 1.2 2008 X3D Architecture and base components Edition 2, Part 1, 18 Texturing component for the definitions in the international standard. HISTORY New entity in IFC2x2."

#:IFC.xml:25687
msgid "IfcImageTexture_URLReference"
msgstr "URLReference"

msgid "IfcImageTexture_URLReference_DEFINITION"
msgstr "Location, provided as an URI, at which the image texture is electronically published."

#:IFC.xml:25694
msgid "IfcIndexedColourMap"
msgstr "IfcIndexedColourMap"

msgid "IfcIndexedColourMap_DEFINITION"
msgstr "The [[IfcIndexedColourMap]] provides the assignment of colour information to individual faces. It is used for colouring faces of tessellated face sets. The [[IfcIndexedColourMap]] defines an index into an indexed list of colour information. The Colours are a two dimensional list of colours provided by three RGB values. The ColourIndex attribute corresponds to the CoordIndex of the [[IfcTessellatedFaceSet]] defining the corresponding index list of faces. The Opacity attribute provides the alpha channel for all faces of the tessellated face set. Figure 1 shows the use of [[IfcTriangulatedFaceSet]] with colours per face. [[IfcIndexedColourMap]] 01 .. .. .. .. figures ifcindexedcolourmap fig1.png Figure 1 Indexed colour map Figure 2 illustrates an [[IfcTriangulatedFaceSet]] represented by [[IfcTriangulatedFaceSet]].CoordIndex 1,6,5 , 1,2,6 , 6,2,7 , 7,2,3 , 7,8,6 , 6,8,5 , 5,8,1 , 1,8,4 , 4,2,1 , 2,4,3 , 4,8,7 , 7,3,4 [[IfcCartesianPointList]].CoordList 0.,0.,0. , 1.,0.,0. , 1.,1.,0. , 0.,1.,0. , 0.,0.,2. , 1.,0.,2. , 1.,1.,2. , 0.,1.,2. [[IfcIndexedColourMap]].ColourIndex 1, 1, 2, 2, 3, 3, 1, 1, 1, 1, 1, 1, [[IfcColourRgbList]].ColourList 1.,0.,0. , 0.,1.,0. , 1.,1.,0. Figure 2 Indexed colour map geometry HISTORY New entity in IFC4."

#:IFC.xml:10608
msgid "IfcIndexedColourMap_MappedTo"
msgstr "MappedTo"

msgid "IfcIndexedColourMap_MappedTo_DEFINITION"
msgstr "Reference to the [[IfcTessellatedFaceSet]] to which it applies the colours and alpha channel."

#:IFC.xml:25498
msgid "IfcIndexedColourMap_Colours"
msgstr "Colours"

msgid "IfcIndexedColourMap_Colours_DEFINITION"
msgstr "Indexable list of lists of quadruples, representing RGB colours."

#:IFC.xml:25695
msgid "IfcIndexedColourMap_ColourIndex"
msgstr "ColourIndex"

msgid "IfcIndexedColourMap_ColourIndex_DEFINITION"
msgstr "Index into the [[IfcColourRgbList]] for each face of the [[IfcTriangulatedFaceSet]] . The colour is applied uniformly to the indexed face."

#:IFC.xml:25700
msgid "IfcIndexedColourMap_Opacity"
msgstr "Opacity"

msgid "IfcIndexedColourMap_Opacity_DEFINITION"
msgstr "The the opacity value, that applies equaly to all faces of the tessellated face set. 1.0 means opaque, and 0.0 completely transparent. If not provided, 1.0 is assumed all colours are opque . NOTE The definition of the alpha channel component for opacity follows the new definitions in image processing, where 0.0 means full transparency and 1.0 or 2 bit depths 1 means fully opaque. This is contrary to the definition of transparency in [[IfcSurfaceStyleShading]] ."

#:IFC.xml:25707
msgid "IfcIndexedTextureMap"
msgstr "IfcIndexedTextureMap"

msgid "IfcIndexedTextureMap_DEFINITION"
msgstr "The [[IfcIndexedTextureMap]] provides the mapping of the 2 dimensional texture coordinates to the surface onto which it is mapped. It is used for mapping the texture to faces of tessellated face sets. The [[IfcIndexedTextureMap]] defines an index into an indexed list of texture coordinates. The TexCoords are a two dimensional list of texture coordinates provided by two parameter values. Subtypes of [[IfcIndexedTextureMap]] establish the index attribute corresponding to subtypes of [[IfcTessellatedFaceSet]] defining the corresponding index lists of vertices. HISTORY New entity in IFC4."

#:IFC.xml:10622
msgid "IfcIndexedTextureMap_MappedTo"
msgstr "MappedTo"

msgid "IfcIndexedTextureMap_MappedTo_DEFINITION"
msgstr "Reference to the [[IfcTessellatedFaceSet]] to which it applies the texture map."

#:IFC.xml:25710
msgid "IfcIndexedTextureMap_TexCoords"
msgstr "TexCoords"

msgid "IfcIndexedTextureMap_TexCoords_DEFINITION"
msgstr "Indexable list of texture vertices."

#:IFC.xml:25722
msgid "IfcIndexedTriangleTextureMap"
msgstr "IfcIndexedTriangleTextureMap"

msgid "IfcIndexedTriangleTextureMap_DEFINITION"
msgstr "The [[IfcIndexedTriangleTextureMap]] provides the mapping of the 2 dimensional texture coordinates to the surface onto which it is mapped. It is used for mapping the texture to triangles of the [[IfcTriangulatedFaceSet]] . The [[IfcIndexedTriangleTextureMap]] defines an index into an indexed list of texture coordinates. The TexCoordIndex is a two dimensional list, where first dimension is the unbounded list of faces corresponding to the list of triangles defined by CoordIndex at [[IfcTriangulatedFaceSet]] second dimension is the fixed list of three indices to texture vertices cooresponding to the fixed list of indices to vertices at [[IfcTriangulatedFaceSet]] The TexCoords defined at supertype [[IfcIndexedTextureMap]] are a two dimensional list of texture coordinates provided by two parameter values. Each index of the second dimension list of TexCoordIndex points to a texture vertex in TexCoords . Figure 1 shows the use of [[IfcTriangulatedFaceSet]] with textures. Figure 1 Indexed triangle texture map Figure 2 illustrates an [[IfcTriangulatedFaceSet]] represented by [[IfcTriangulatedFaceSet]].CoordIndex 1,6,5 , 1,2,6 , 6,2,7 , 7,2,3 , 7,8,6 , 6,8,5 , 5,8,1 , 1,8,4 , 4,2,1 , 2,4,3 , 4,8,7 , 7,3,4 [[IfcCartesianPointList]].CoordList 0.,0.,0. , 1.,0.,0. , 1.,1.,0. , 0.,1.,0. , 0.,0.,2. , 1.,0.,2. , 1.,1.,2. , 0.,1.,2. [[IfcIndexedTriangleTextureMap]].TexCoordsIndex 1 4 3 , 1 2 4 , 3 1 4 , 4 1 2 , 8 7 6 , 6 7 5 , 4 3 2 , 2 3 1 , 5 8 7 , 8 5 6 , 2 4 3 , 3 1 2 [[IfcTextureVertexList]].TexCoordsList 0. 0.5 , 1. 0.5 , 0. 1.5 , 1. 1.5 , 0. 0. , 0. 1. , 1. 0. , 1. 1. Figure 2 Indexed triangle texture map geometry HISTORY New entity in IFC4."

#:IFC.xml:25723
msgid "IfcIndexedTriangleTextureMap_TexCoordIndex"
msgstr "TexCoordIndex"

msgid "IfcIndexedTriangleTextureMap_TexCoordIndex_DEFINITION"
msgstr "Index into the [[IfcTextureVertexList]] for each vertex of the triangles representing the [[IfcTriangulatedFaceSet]] ."

#:IFC.xml:25730
msgid "IfcPixelTexture"
msgstr "IfcPixelTexture"

msgid "IfcPixelTexture_DEFINITION"
msgstr "An [[IfcPixelTexture]] provides a 2D image based texture map as an explicit array of pixel values list of Pixel binary attributes . In contrary to the [[IfcImageTexture]] the [[IfcPixelTexture]] holds a 2 dimensional list of pixel color and opacity directly, instead of referencing to an URL. The following definitions from ISO IEC 19775 1 X3D Architecture and base components X3D Specification http www.web3d.org x3d specifications apply The PixelTexture node defines a 2D image based texture map as an explicit array of pixel values image field and parameters controlling tiling repetition of the texture onto geometry. Texture maps are defined in a 2D coordinate system s, t that ranges from 0.0 to 1.0 in both directions. The bottom edge of the pixel image corresponds to the S axis of the texture map, and left edge of the pixel image corresponds to the T axis of the texture map. The lower left pixel of the pixel image corresponds to s 0.0, t 0.0, and the top right pixel of the image corresponds to s 1.0, t 1.0. The Image field specifies a single uncompressed 2 dimensional pixel image. Image fields contain three integers representing the width, height and number of components in the image, followed by width height hexadecimal values representing the pixels in the image. Pixel values are limited to 256 levels of intensity that is, 0x00 0xFF hexadecimal . 1. A one component image specifies one byte hexadecimal value representing the intensity of the image. For example, 0xFF is full intensity in hexadecimal 255 in decimal , 0x00 is no intensity 0 in decimal . 2. A two component image specifies the intensity in the first high byte and the alpha opacity in the second low byte. 3. Pixels in a three component image specify the red component in the first high byte, followed by the green and blue components for example, 0xFF0000 is red, 0x00FF00 is green, 0x0000FF is blue . 4. Four component images specify the alpha opacity byte after red green blue e.g., 0x0000FF80 is semi transparent blue . A value of 00 is completely transparent, FF is completely opaque, 80 is semi transparent. Note that alpha equals 1.0 transparency , if alpha and transparency each range from 0.0 to 1.0. HISTORY New entity in IFC2x2."

#:IFC.xml:25731
msgid "IfcPixelTexture_ColourComponents"
msgstr "ColourComponents"

msgid "IfcPixelTexture_ColourComponents_DEFINITION"
msgstr "Indication whether the pixel values contain a 1, 2, 3, or 4 colour component."

#:IFC.xml:25736
msgid "IfcPixelTexture_Height"
msgstr "Height"

msgid "IfcPixelTexture_Height_DEFINITION"
msgstr "The number of pixels in height T direction."

#:IFC.xml:25741
msgid "IfcPixelTexture_Pixel"
msgstr "Pixel"

msgid "IfcPixelTexture_Pixel_DEFINITION"
msgstr "Flat list of hexadecimal values, each describing one pixel by 1, 2, 3, or 4 components. .change ifc2x3 IFC2x3 CHANGE The data type has been changed from STRING to BINARY. Formal Propositions"

#:IFC.xml:25746
msgid "IfcPixelTexture_Width"
msgstr "Width"

msgid "IfcPixelTexture_Width_DEFINITION"
msgstr "The number of pixels in width S direction."

#:IFC.xml:25753
msgid "IfcPreDefinedColour"
msgstr "IfcPreDefinedColour"

msgid "IfcPreDefinedColour_DEFINITION"
msgstr "The pre defined colour determines those qualified names which can be used to identify a colour that is in scope of the current data exchange specification in contrary to colour specification which defines the colour directly by its colour components . NOTE Corresponding ISO 10303 name pre defined colour. It has been made into an abstract entity in IFC. Please refer to ISO IS 10303 46 1994, p. 141 for the final definition of the formal standard. HISTORY New entity in IFC2x2."

#:IFC.xml:25757
msgid "IfcPreDefinedCurveFont"
msgstr "IfcPreDefinedCurveFont"

msgid "IfcPreDefinedCurveFont_DEFINITION"
msgstr ".extDef NOTE Definition according to ISO CD 10303 46 1992 The predefined curve font type is an abstract supertype provided to define an application specific curve font. The name label shall be constrained in the application protocol to values that are given specific meaning for curve fonts in that application protocol. NOTE The [[IfcPreDefinedCurveFont]] is an abstract entity, subtypes of it provide the predefined curve font by agreement of the values of the inherited Name attribute. Currently the only subtype provided is [[IfcDraughtingPreDefinedCurveFont]] . NOTE Corresponding ISO 10303 name pre defined curve font. Please refer to ISO IS 10303 46 1994, p. 103 for the final definition of the formal standard. HISTORY New entity in IFC2x2."

#:IFC.xml:25761
msgid "IfcPreDefinedItem"
msgstr "IfcPreDefinedItem"

msgid "IfcPreDefinedItem_DEFINITION"
msgstr "A pre defined item is a qualified name given to a style or font which is determined within the data exchange specification by convention on using the Name attribute value in contrary to externally defined items, which are agreed by an external source . NOTE The convention on using the Name value is defined at the subtypes of [[IfcPreDefinedItem]] and is part of the specification. NOTE Corresponding ISO 10303 name pre defined item. Please refer to ISO IS 10303 41 1994, page 137 for the final definition of the formal standard. HISTORY New entity in IFC2x2."

#:IFC.xml:25762
msgid "IfcPreDefinedItem_Name"
msgstr "Name"

msgid "IfcPreDefinedItem_Name_DEFINITION"
msgstr "The string by which the pre defined item is identified. Allowable values for the string are declared at the level of subtypes."

#:IFC.xml:25769
msgid "IfcPreDefinedTextFont"
msgstr "IfcPreDefinedTextFont"

msgid "IfcPreDefinedTextFont_DEFINITION"
msgstr "The pre defined text font determines those qualified names which can be used for fonts that are in scope of the current data exchange specification in contrary to externally defined text fonts . There are two choices IfcDraughtingPreDefinedTextFont for definitions from ISO IS 10303 46 1994 for old vector based and monospace text. [[IfcTextStyleFontModel]] for definitions from Cascading Style Sheets, level 1 http www.w3.org TR REC CSS1 target blank , W3C Recommendation 17 Dec 1996, revised 11 Jan 1999, CSS1, for all true type text. The use of the CSS1 definitions is the preferred way to represent text fonts. NOTE Corresponding ISO 10303 name pre defined text font. Please refer to ISO IS 10303 46 1994, p. 138 for the final definition of the formal standard. HISTORY New entity in IFC2x2. .change ifc2x3 IFC2x3 CHANGE The [[IfcTextStyleFontModel]] has been added as new subtype."

#:IFC.xml:25773
msgid "IfcPresentationStyle"
msgstr "IfcPresentationStyle"

msgid "IfcPresentationStyle_DEFINITION"
msgstr "The [[IfcPresentationStyle]] is an abstract generalization of style table for presentation information assigned to geometric representation items. It includes styles for curves, areas, surfaces, and text. Style information may include colour, hatching, rendering, and text fonts. The different styles may include length measures directly as a length measure with infered unit, or indirectly as a ratio in relation to another length measure . They may apply to curve pattern, hatch line distances, text spacing and font sizes. The attribute ModelOrDraughting determines whether those length measures are provided as model or draughting measures. Model measures, also called scale dependent measures, define the distance, size or other length measures as being always the same in model space and the distance size or other length measures on paper depend on the plotting scale. Draughting measures, also called scale independent measures, define the distance , size or other length measures as being always the same, when plotted on paper, independent of the plot scale. Each subtype of [[IfcPresentationStyle]] is assigned to the [[IfcGeometricRepresentationItem]] s through an intermediate [[IfcStyledItem]] . HISTORY New entity in IFC2x3."

#:IFC.xml:25774
msgid "IfcPresentationStyle_Name"
msgstr "Name"

msgid "IfcPresentationStyle_Name_DEFINITION"
msgstr "Name of the presentation style."

#:IFC.xml:25804
msgid "IfcReflectanceMethodEnum"
msgstr "IfcReflectanceMethodEnum"

msgid "IfcReflectanceMethodEnum_DEFINITION"
msgstr "The [[IfcReflectanceMethodEnum]] defines the range of different reflectance methods available. HISTORY New enumeration type in IFC2x2. Items BLINN A reflectance model providing a smooth, slightly shiny appearance. FLAT A reflectance model providing a constant colour. This model ignores the effect of all light sources. GLASS A reflectance model that supports an approximation of glass like materials that have both reflective and transmissive properties. MATT A reflectance model providing a dull matte appearance. METAL A reflectance model providing a specular metallic appearance. MIRROR A reflectance model that supports secondary mirrored views through ray tracing. PHONG A reflectance model conforming with the Phong model in which reflections are greatest in the mirror direction of a surface opposite the viewing direction with respect to the surface normal. PLASTIC A reflectance model providing a specular effect which is similar to the Phong model. STRAUSS A reflectance model for metallic and non metallic appearance based on a limited set of control parameter. NOTDEFINED"

#:IFC.xml:25805
msgid "IfcReflectanceMethodEnum_BLINN"
msgstr "BLINN"

msgid "IfcReflectanceMethodEnum_BLINN_DEFINITION"
msgstr "A reflectance model providing a smooth, slightly shiny appearance."

#:IFC.xml:25806
msgid "IfcReflectanceMethodEnum_FLAT"
msgstr "FLAT"

msgid "IfcReflectanceMethodEnum_FLAT_DEFINITION"
msgstr "A reflectance model providing a constant colour. This model ignores the effect of all light sources."

#:IFC.xml:25807
msgid "IfcReflectanceMethodEnum_GLASS"
msgstr "GLASS"

msgid "IfcReflectanceMethodEnum_GLASS_DEFINITION"
msgstr "A reflectance model that supports an approximation of glass like materials that have both reflective and transmissive properties."

#:IFC.xml:25808
msgid "IfcReflectanceMethodEnum_MATT"
msgstr "MATT"

msgid "IfcReflectanceMethodEnum_MATT_DEFINITION"
msgstr "A reflectance model providing a dull matte appearance."

#:IFC.xml:25809
msgid "IfcReflectanceMethodEnum_METAL"
msgstr "METAL"

msgid "IfcReflectanceMethodEnum_METAL_DEFINITION"
msgstr "A reflectance model providing a specular metallic appearance."

#:IFC.xml:25810
msgid "IfcReflectanceMethodEnum_MIRROR"
msgstr "MIRROR"

msgid "IfcReflectanceMethodEnum_MIRROR_DEFINITION"
msgstr "A reflectance model that supports secondary mirrored views through ray tracing."

#:IFC.xml:25811
msgid "IfcReflectanceMethodEnum_NOTDEFINED"
msgstr "NOTDEFINED"

msgid "IfcReflectanceMethodEnum_NOTDEFINED_DEFINITION"
msgstr "NOTDEFINED"

#:IFC.xml:25812
msgid "IfcReflectanceMethodEnum_PHONG"
msgstr "PHONG"

msgid "IfcReflectanceMethodEnum_PHONG_DEFINITION"
msgstr "A reflectance model conforming with the Phong model in which reflections are greatest in the mirror direction of a surface opposite the viewing direction with respect to the surface normal."

#:IFC.xml:25813
msgid "IfcReflectanceMethodEnum_PLASTIC"
msgstr "PLASTIC"

msgid "IfcReflectanceMethodEnum_PLASTIC_DEFINITION"
msgstr "A reflectance model providing a specular effect which is similar to the Phong model."

#:IFC.xml:25814
msgid "IfcReflectanceMethodEnum_STRAUSS"
msgstr "STRAUSS"

msgid "IfcReflectanceMethodEnum_STRAUSS_DEFINITION"
msgstr "A reflectance model for metallic and non metallic appearance based on a limited set of control parameter."

#:IFC.xml:25816
msgid "IfcSizeSelect"
msgstr "IfcSizeSelect"

msgid "IfcSizeSelect_DEFINITION"
msgstr ""

#:IFC.xml:25817
msgid "IfcSpecularHighlightSelect"
msgstr "IfcSpecularHighlightSelect"

msgid "IfcSpecularHighlightSelect_DEFINITION"
msgstr ""

#:IFC.xml:25818
msgid "IfcStyledItem"
msgstr "IfcStyledItem"

msgid "IfcStyledItem_DEFINITION"
msgstr "The [[IfcStyledItem]] holds presentation style information for products, either explicitly for an [[IfcGeometricRepresentationItem]] being part of an [[IfcShapeRepresentation]] assigned to a product, or by assigning presentation information to [[IfcMaterial]] being assigned as other representation for a product. If the [[IfcStyledItem]] is used within a reference from an [[IfcProductDefinitionShape]] then one Item shall be provided. If the [[IfcStyledItem]] is used within a reference from an [[IfcMaterialDefinitionRepresentation]] then no Item shall be provided. .extDef NOTE Definition according to ISO CD 10303 46 1992 The styled item is an assignment of style for presentation to a geometric representation item as it is used in a representation. NOTE Entity adapted from styled item defined in ISO10303 46. HISTORY New entity in IFC2x2. .change ifc2x2 IFC2x2 Addendum 1 CHANGE The entity [[IfcStyledItem]] has been made non abstract and the attribute Name added. .change ifc2x3 IFC2x3 CHANGE The attribute Item has been made optional, upward compatibility for file based exchange is guaranteed. .change ifc2x4 IFC4 CHANGE The subtype IfcAnnotationOccurrence and its subtypes are deleted. Use [[IfcStyledItem]] for all instantiations. The data type of Styles has been changed to IfcStyleAssignmentSelect .use head Use Definition Figure 1 illustrates use of [[IfcStyledItem]] for the two usage examples As a presentation for a geometric representation item As a presentation for a material definition NOTE The new IfcStyleAssignmentSelect allows the direct assignment styles, such as [[IfcCurveStyle]] , [[IfcSurfaceStyle]] without using the intermediate IfcPresentationStyleAssignment 2x4 example .. .. .. .. figures ifcstyleditem fig 1.png Figure 1 Styled item"

#:IFC.xml:12480
msgid "IfcStyledItem_Item"
msgstr "Item"

msgid "IfcStyledItem_Item_DEFINITION"
msgstr "A geometric representation item to which the style is assigned. .change ifc2x2 IFC2x2 Add2 CHANGE The attribute Item has been made optional. Upward compatibility for file based exchange is guaranteed."

#:IFC.xml:25792
msgid "IfcStyledItem_Styles"
msgstr "Styles"

msgid "IfcStyledItem_Styles_DEFINITION"
msgstr "Representation styles which are assigned, either to an geometric representation item, or to a material definition. .change ifc2x4 IFC4 CHANGE The data type has been changed to IfcStyleAssignmentSelect with upward compatibility for file based exchange. NOTE Only the select item [[IfcPresentationStyle]] shall be used from IFC4 onwards, the IfcPresentationStyleAssignment has been deprecated."

#:IFC.xml:25819
msgid "IfcStyledItem_Name"
msgstr "Name"

msgid "IfcStyledItem_Name_DEFINITION"
msgstr "The word, or group of words, by which the styled item is referred to. Formal Propositions"

#:IFC.xml:25826
msgid "IfcSurfaceSide"
msgstr "IfcSurfaceSide"

msgid "IfcSurfaceSide_DEFINITION"
msgstr "[[IfcSurfaceSide]] is a denotion of whether negative, positive or both sides of a surface are being referenced. NOTE Type adapted from surface side defined in ISO10303 46. HISTORY New enumeration type in IFC2.0 Items POSITIVE NEGATIVE The side of a surface which is in the opposite direction than the surface normal derived from the mathematical definition. BOTH Both, positive and negative side."

#:IFC.xml:25827
msgid "IfcSurfaceSide_BOTH"
msgstr "BOTH"

msgid "IfcSurfaceSide_BOTH_DEFINITION"
msgstr "Both, positive and negative side."

#:IFC.xml:25828
msgid "IfcSurfaceSide_NEGATIVE"
msgstr "NEGATIVE"

msgid "IfcSurfaceSide_NEGATIVE_DEFINITION"
msgstr "The side of a surface which is in the opposite direction than the surface normal derived from the mathematical definition."

#:IFC.xml:25829
msgid "IfcSurfaceSide_POSITIVE"
msgstr "POSITIVE"

msgid "IfcSurfaceSide_POSITIVE_DEFINITION"
msgstr "POSITIVE"

#:IFC.xml:25831
msgid "IfcSurfaceStyle"
msgstr "IfcSurfaceStyle"

msgid "IfcSurfaceStyle_DEFINITION"
msgstr "[[IfcSurfaceStyle]] is an assignment of one or many surface style elements to a surface, defined by subtypes of [[IfcSurface]] , [[IfcFaceBasedSurfaceModel]] , [[IfcShellBasedSurfaceModel]] , or by subtypes of [[IfcSolidModel]] . The positive direction of the surface normal relates to the positive side. In case of solids the outside of the solid is to be taken as positive side. NOTE The surface style is often referred to as material definition in rendering applications. NOTE Corresponding ISO 10303 entity surface style usage and surface side style. Please refer to ISO IS 10303 46 1994 for the final definition of the formal standard. The surface style definition in regard to support of rendering has been greatly expanded beyond the scope of ISO IS 10303 46. HISTORY New entity in IFC2x."

#:IFC.xml:25832
msgid "IfcSurfaceStyle_Side"
msgstr "Side"

msgid "IfcSurfaceStyle_Side_DEFINITION"
msgstr "An indication of which side of the surface to apply the style."

#:IFC.xml:25837
msgid "IfcSurfaceStyle_Styles"
msgstr "Styles"

msgid "IfcSurfaceStyle_Styles_DEFINITION"
msgstr "A collection of different surface styles. Formal Propositions"

#:IFC.xml:25844
msgid "IfcSurfaceStyleElementSelect"
msgstr "IfcSurfaceStyleElementSelect"

msgid "IfcSurfaceStyleElementSelect_DEFINITION"
msgstr ""

#:IFC.xml:25845
msgid "IfcSurfaceStyleLighting"
msgstr "IfcSurfaceStyleLighting"

msgid "IfcSurfaceStyleLighting_DEFINITION"
msgstr "[[IfcSurfaceStyleLighting]] is a container class for properties for calculation of physically exact illuminance related to a particular surface style. Figure 1 shows the reflection and transmission components from an incident ray. The sum of the components for reflection and transmission is a value of 1.0 denoting that the incident ray is completely decomposed into reflection and transmission components. Each value of reflection and transmission is therefore within the range 0.0 to 1.0. material reflection components .. .. .. .. figures ifcsurfacelightingproperties fig1.gif Figure 1 Surface style lighting All these factors can be measured physically and are ratios for the red, green and blue part of the light. These properties are defined in the model as Type IfcColorRGB with a factor for each colour. EXAMPLE A green glass transmits only green light, so its transmission factor is 0.0 for red, between 0.0 and 1.0 for green and 0.0 for blue. A green surface reflects only green light, so the reflectance factor is 0.0 for red, between 0.0 and 1.0 for green and 0.0 for blue. HISTORY New entity in IFC2x2."

#:IFC.xml:25430
msgid "IfcSurfaceStyleLighting_DiffuseTransmissionColour"
msgstr "DiffuseTransmissionColour"

msgid "IfcSurfaceStyleLighting_DiffuseTransmissionColour_DEFINITION"
msgstr "The degree of diffusion of the transmitted light. In the case of completely transparent materials there is no diffusion. The greater the diffusing power, the smaller the direct component of the transmitted light, up to the point where only diffuse light is produced. A value of 1 means totally diffuse for that colour part of the light. NOTE The factor can be measured physically and has three ratios for the red, green and blue part of the light."

#:IFC.xml:25442
msgid "IfcSurfaceStyleLighting_DiffuseReflectionColour"
msgstr "DiffuseReflectionColour"

msgid "IfcSurfaceStyleLighting_DiffuseReflectionColour_DEFINITION"
msgstr "The degree of diffusion of the reflected light. In the case of specular surfaces there is no diffusion. The greater the diffusing power of the reflecting surface, the smaller the specular component of the reflected light, up to the point where only diffuse light is produced. A value of 1 means totally diffuse for that colour part of the light. NOTE The factor can be measured physically and has three ratios for the red, green and blue part of the light."

#:IFC.xml:25454
msgid "IfcSurfaceStyleLighting_TransmissionColour"
msgstr "TransmissionColour"

msgid "IfcSurfaceStyleLighting_TransmissionColour_DEFINITION"
msgstr "Describes how the light falling on a body is totally or partially transmitted. .note The factor can be measured physically and has three ratios for the red, green and blue part of the light."

#:IFC.xml:25466
msgid "IfcSurfaceStyleLighting_ReflectanceColour"
msgstr "ReflectanceColour"

msgid "IfcSurfaceStyleLighting_ReflectanceColour_DEFINITION"
msgstr "A coefficient that determines the extent that the light falling onto a surface is fully or partially reflected. NOTE The factor can be measured physically and has three ratios for the red, green and blue part of the light."

#:IFC.xml:25849
msgid "IfcSurfaceStyleRefraction"
msgstr "IfcSurfaceStyleRefraction"

msgid "IfcSurfaceStyleRefraction_DEFINITION"
msgstr "[[IfcSurfaceStyleRefraction]] extends the surface style lighting, or the surface style rendering definition for properties for calculation of physically exact illuminance by adding seldomly used properties. Currently this includes the refraction index by which the light ray refracts when passing through a prism and the dispersion factor or Abbe constant which takes into account the wavelength dependency of the refraction. NOTE If such refraction properties are used, the [[IfcSurfaceStyle]] should include within its set of Styles depending on whether rendering or lighting is used an instance of [[IfcSurfaceStyleLighting]] and [[IfcSurfaceStyleRefraction]] , or an instance of [[IfcSurfaceStyleRendering]] and [[IfcSurfaceStyleRefraction]] . HISTORY New entity in IFC2x2."

#:IFC.xml:25850
msgid "IfcSurfaceStyleRefraction_DispersionFactor"
msgstr "DispersionFactor"

msgid "IfcSurfaceStyleRefraction_DispersionFactor_DEFINITION"
msgstr "The Abbe constant given as a fixed ratio between the refractive indices of the material at different wavelengths. A low Abbe number means a high dispersive power. In general this translates to a greater angular spread of the emergent spectrum."

#:IFC.xml:25855
msgid "IfcSurfaceStyleRefraction_RefractionIndex"
msgstr "RefractionIndex"

msgid "IfcSurfaceStyleRefraction_RefractionIndex_DEFINITION"
msgstr "The index of refraction for all wave lengths of light. The refraction index is the ratio between the speed of light in a vacuum and the speed of light in the medium. E.g. glass has a refraction index of 1.5, whereas water has an index of 1.33"

#:IFC.xml:25863
msgid "IfcSurfaceStyleRendering"
msgstr "IfcSurfaceStyleRendering"

msgid "IfcSurfaceStyleRendering_DEFINITION"
msgstr "[[IfcSurfaceStyleRendering]] holds the properties for visualization related to a particular surface side style. It allows rendering properties to be defined by a colour component SurfaceColour attribute inherited from [[IfcSurfaceStyleShading]] a transparency component Transparency attribute inherited from [[IfcSurfaceStyleShading]] a reflectance component, given either by applying reflectance factors to the surface colour diffuse component SurfaceColour DiffuseFactor transmission component SurfaceColour TransmissionFactor diffuse transmission component SurfaceColour DiffuseTransmissionFactor reflection component SurfaceColour ReflectionFactor specular component SurfaceColour SpecularFactor attribute together with SpecularHighlight or, by explicitly defining such factors as colours DiffuseColour , TransmissionColour , DiffuseTransmissionColour , ReflectionColour and SpecularColour a displacement component, currently only given by a texture map with the TextureType bump a coverage component, currently only given by the alpha component of the texture map 2 or 4 component colour texture NOTE The inherited attribute SurfaceColour is treated as the ambient colour and specifies how much ambient light from light sources this surface shall reflect. Ambient light is omnidirectional and depends only on the number of light sources, not their positions with respect to the surface. NOTE If the reflectance method, as given by the [[IfcReflectanceMethodEnum]] is GLASS , the transmission factor controls the level of transparency in the glass, In this case the transparency factor is interpreted as transmission factor. NOTE If both Transparency and TransmissionColour or factor are included, the following definitions apply Transparency is the ratio of the transmitted flux in a solid angle of 2 PI sr one hemisphere . It is a simple colour filtration that does not account for refraction. Transmission factor of a material is the ratio of transmitted flux in a given solid angle to the transmitted flux of a completely diffuse material with 100 transmission in the same solid angle. It is the portion of light that goes through the material and may be refracted. NOTE For reflectance equations and further information about the surface style properties and its processing, see ISO IEC 14772 1 1997 The Virtual Reality Modeling Language HISTORY New entity in IFC2x."

#:IFC.xml:25864
msgid "IfcSurfaceStyleRendering_DiffuseColour"
msgstr "DiffuseColour"

msgid "IfcSurfaceStyleRendering_DiffuseColour_DEFINITION"
msgstr "The diffuse part of the reflectance equation can be given as either a colour or a scalar factor. The diffuse colour field reflects all light sources depending on the angle of the surface with respect to the light source. The more directly the surface faces the light, the more diffuse light reflects. The diffuse factor field specifies how much diffuse light from light sources this surface shall reflect. Diffuse light depends on the angle of the surface with respect to the light source. The more directly the surface faces the light, the more diffuse light reflects. The diffuse colour is then defined by surface colour diffuse factor."

#:IFC.xml:25869
msgid "IfcSurfaceStyleRendering_DiffuseTransmissionColour"
msgstr "DiffuseTransmissionColour"

msgid "IfcSurfaceStyleRendering_DiffuseTransmissionColour_DEFINITION"
msgstr "The diffuse transmission part of the reflectance equation can be given as either a colour or a scalar factor. It only applies to materials whose Transparency field is greater than zero. The diffuse transmission colour specifies how much diffuse light is reflected at the opposite side of the material surface. The diffuse transmission factor field specifies how much diffuse light from light sources this surface shall reflect on the opposite side of the material surface. The diffuse transmissive colour is then defined by surface colour diffuse transmissive factor."

#:IFC.xml:25874
msgid "IfcSurfaceStyleRendering_ReflectanceMethod"
msgstr "ReflectanceMethod"

msgid "IfcSurfaceStyleRendering_ReflectanceMethod_DEFINITION"
msgstr "Identifies the predefined types of reflectance method from which the method required may be set."

#:IFC.xml:25879
msgid "IfcSurfaceStyleRendering_ReflectionColour"
msgstr "ReflectionColour"

msgid "IfcSurfaceStyleRendering_ReflectionColour_DEFINITION"
msgstr "The reflection or mirror part of the reflectance equation can be given as either a colour or a scalar factor. Applies to glass and mirror reflection models. The reflection colour specifies the contribution made by light from the mirror direction, i.e. light being reflected from the surface. The reflection factor specifies the amount of contribution made by light from the mirror direction. The reflection colour is then defined by surface colour reflection factor."

#:IFC.xml:25884
msgid "IfcSurfaceStyleRendering_SpecularColour"
msgstr "SpecularColour"

msgid "IfcSurfaceStyleRendering_SpecularColour_DEFINITION"
msgstr "The specular part of the reflectance equation can be given as either a colour or a scalar factor. The specular colour determine the specular highlights e.g., the shiny spots on an apple . When the angle from the light to the surface is close to the angle from the surface to the viewer, the specular colour is added to the diffuse and ambient colour calculations. The specular factor defines the specular part, the specular colour is then defined by surface colour specular factor."

#:IFC.xml:25889
msgid "IfcSurfaceStyleRendering_SpecularHighlight"
msgstr "SpecularHighlight"

msgid "IfcSurfaceStyleRendering_SpecularHighlight_DEFINITION"
msgstr "The exponent or roughness part of the specular reflectance."

#:IFC.xml:25894
msgid "IfcSurfaceStyleRendering_TransmissionColour"
msgstr "TransmissionColour"

msgid "IfcSurfaceStyleRendering_TransmissionColour_DEFINITION"
msgstr "The transmissive part of the reflectance equation can be given as either a colour or a scalar factor. It only applies to materials which Transparency field is greater than zero. The transmissive colour field specifies the colour that passes through a transparant material like the colour that shines through a glass . The transmissive factor defines the transmissive part, the transmissive colour is then defined by surface colour transmissive factor."

#:IFC.xml:25901
msgid "IfcSurfaceStyleShading"
msgstr "IfcSurfaceStyleShading"

msgid "IfcSurfaceStyleShading_DEFINITION"
msgstr "The [[IfcSurfaceStyleShading]] allows for colour information and transparency used for shading and simple rendering. The surface colour is used for colouring or simple shading of the assigned surfaces and the transparency for identifying translucency, where 0.0 is completely opaque, and 1.0 is completely transparent. HISTORY New entity in IFC2x."

#:IFC.xml:25478
msgid "IfcSurfaceStyleShading_SurfaceColour"
msgstr "SurfaceColour"

msgid "IfcSurfaceStyleShading_SurfaceColour_DEFINITION"
msgstr "The colour used to render the surface. The surface colour for visualisation is defined by specifying the intensity of red, green and blue."

#:IFC.xml:25902
msgid "IfcSurfaceStyleShading_Transparency"
msgstr "Transparency"

msgid "IfcSurfaceStyleShading_Transparency_DEFINITION"
msgstr "The transparency field specifies how clear an object is, with 1.0 being completely transparent, and 0.0 completely opaque. If not given, the value 0.0 opaque is assumed. NOTE The definition of 1 being transparent and 0 being opaque is the opposite of the definition in alpha channels, where 0.0 is completely transparent and 1.0 is completely opaque. This definition is due to upward compatibility to previous versions of this standard in different to the definition in [[IfcIndexedColourMap]] ."

#:IFC.xml:25910
msgid "IfcSurfaceStyleWithTextures"
msgstr "IfcSurfaceStyleWithTextures"

msgid "IfcSurfaceStyleWithTextures_DEFINITION"
msgstr "The entity [[IfcSurfaceStyleWithTextures]] allows to include image textures in surface styles. These image textures can be applied repeating across the surface or mapped with a particular scale upon the surface. The entity [[IfcSurfaceStyleWithTextures]] is part of the surface style table for presentation information assigned to surfaces for shading, rendering and lighting with textures. The mapping of the texture onto the surface or the solid is determined by the texture coordinates, in absense of an [[IfcTextureCoordinate]] assigned to each surface texture, a default mapping of the texture to the geometric face or surface applies. Surface textures included in the [[IfcSurfaceStyleWithTextures]] are two dimensional map formats. They define 2D images that contain an array of colour values describing the texture. Depending on the number of IfcSurfaceTextures being included in the list of Textures the [[IfcSurfaceStyleWithTextures]] either describes a single texture, or a multi texture. single texture a single surface texture is applied to the styled geometric item entirely or partly with optional repetition and texture transformation multi texture two or more surface textures are applied to the styled geometric item entirely or partly with optional repetition, texture transformation or texture coordinate mapping being specific for each texture. .spec head Informal Propositions 1. Only one instance of [[IfcSurfaceStyleWithTextures]] shall be referenced by an [[IfcStyledItem]] and be assigned to an [[IfcGeometricRepresentationItem]] NOTE The definitions of texturing within this standard have been developed in dependence on the texture component of X3D. See ISO IEC 19775 1.2 2008 X3D Architecture and base components Edition 2, Part 1, 18 Texturing component for the definitions in the international standard. HISTORY New entity in IFC2x2. .change ifc2x3 IFC2x3 CHANGE inverse attribute HasTextureCoordinates deleted."

#:IFC.xml:25914
msgid "IfcSurfaceStyleWithTextures_Textures"
msgstr "Textures"

msgid "IfcSurfaceStyleWithTextures_Textures_DEFINITION"
msgstr "The textures applied to the surface. In case of more than one surface texture is included, the IfcSurfaceStyleWithTexture defines a multi texture."

#:IFC.xml:25928
msgid "IfcSurfaceTexture"
msgstr "IfcSurfaceTexture"

msgid "IfcSurfaceTexture_DEFINITION"
msgstr "An [[IfcSurfaceTexture]] provides a 2 dimensional image based texture map. It can either be given by referencing an external image file through an URL reference [[IfcImageTexture]] , including the image file as a blob long binary into the data set [[IfcBlobTexture]] , or by explicitly including an array of pixels [[IfcPixelTexture]] . The following definitions from ISO IEC 19775 1 X3D Architecture and base components X3D Specification http www.web3d.org x3d specifications apply Texture An image used in a texture map to create visual appearance effects when applied to geometry nodes. Texture map A texture plus the general parameters necessary for mapping the texture to geometry. Texture are defined by 2D images that contain an array of colour values describing the texture. The texture values are interpreted differently depending on the number of components in the texture and the specifics of the image format. In general, texture may be described using one of the following forms 1. Intensity textures one component 2. Intensity plus alpha opacity textures two component 3. Full RGB textures three component 4. Full RGB plus alpha opacity textures four component NOTE Image formats specify an alpha opacity, not transparency where alpha 1 transparency . Figure 1 illustrates the texture coordinate system. texture coordinates .. .. .. .. figures ifcsurfacetexture fig 1.png Figure 1 Surface texture coordinates The following definitions from ISO IEC 19775 1 X3D Architecture and base components X3D Specification http www.web3d.org x3d specifications on texture coordinates apply Texture maps are defined in a 2D coordinate system s, t that ranges from 0.0, 1.0 in both directions. The bottom edge of the image corresponds to the S axis of the texture map, and left edge of the image corresponds to the T axis of the texture map. The lower left pixel of the image corresponds to s 0, t 0, and the top right pixel of the image corresponds to s 1, t 1. Texture maps may be viewed as two dimensional colour functions that, given an s, t coordinate, return a colour value colour s, t . If multiple surface textures are included in the [[IfcSurfaceStyleWithTextures]] applying them to a geometric item, a mode and optional parameters can be included that blending operations. The RepeatS and RepeatT Boolean flags control whether the texture map is repeated outside the 0.0, 1.0 texture coordinate range, when applied to a geometric surface, or clamped to lie within the 0.0, 1.0 range. The TextureTransform applies a 2D non uniform transformation to the texture before it is applied to a geometric surface. The following definitions from ISO IEC 19775 1 X3D Architecture and base components X3D Specification http www.web3d.org x3d specifications apply These parameters support changes to the size, orientation, and position of textures on shapes. Note that these operations appear reversed when viewed on the surface of geometry. For example, a scale value of 2 2 will scale the texture coordinates and have the net effect of shrinking the texture size by a factor of 2 texture coordinates are twice as large and thus cause the texture to repeat . A translation of 0.5 0.0 translates the texture coordinates .5 units along the S axis and has the net effect of translating the texture 0.5 along the S axis on the geometry s surface. A rotation of π 2 of the texture coordinates results in a π 2 rotation of the texture on the geometry. The center field specifies a translation offset in texture coordinate space about which the rotation and scale fields are applied. The scale field specifies a scaling factor in S and T of the texture coordinates about the center point. scale values shall be in the range , . The rotation field specifies a rotation in radians of the texture coordinates about the center point after the scale has been applied. A positive rotation value makes the texture coordinates rotate counterclockwise about the centre, thereby rotating the appearance of the texture itself clockwise. The translation field specifies a translation of the texture coordinates. The following conventions apply center TextureTransform.LocalOrigin rotation TextureTransform.Axis1 scale S TextureTransform.Scale scale T TextureTransform.Scale2 NOTE The definitions of texturing within this standard have been developed in dependence on the texture component of X3D. See ISO IEC 19775 1.2 2008 X3D Architecture and base components Edition 2, Part 1, 18 Texturing component for the definitions in the international standard. HISTORY New entity in IFC2x2. .change ifc2x4 IFC4 CHANGE Attribute TextureType replaces by Mode , attributes Parameter and MapsTo aded, new inverse attribute UsedInStyle ."

#:IFC.xml:11394
msgid "IfcSurfaceTexture_TextureTransform"
msgstr "TextureTransform"

msgid "IfcSurfaceTexture_TextureTransform_DEFINITION"
msgstr "The TextureTransform defines a 2D transformation that is applied to the texture coordinates. It affects the way texture coordinates are applied to the surfaces of geometric representation itesm. The 2D transformation supports changes to the size, orientation, and position of textures on shapes. Mirroring is not allowed to be used in the [[IfcCartesianTransformationOperator]]"

#:IFC.xml:25914
msgid "IfcSurfaceTexture_UsedInStyles"
msgstr "UsedInStyles"

msgid "IfcSurfaceTexture_UsedInStyles_DEFINITION"
msgstr "UsedInStyles"

#:IFC.xml:25951
msgid "IfcSurfaceTexture_IsMappedBy"
msgstr "IsMappedBy"

msgid "IfcSurfaceTexture_IsMappedBy_DEFINITION"
msgstr "Texture coordinates, either provided by a corresponding list of texture vertices to vertex based geometric items or by a texture coordinate generator, that applies the surface texture to the surfaces of the geometric items. .change ifc2x4 IFC4 CHANGE New attribute added at the end of the attribute list."

#:IFC.xml:25929
msgid "IfcSurfaceTexture_Mode"
msgstr "Mode"

msgid "IfcSurfaceTexture_Mode_DEFINITION"
msgstr "The Mode attribute is provided to control the appearance of a multi textures. The mode then controls the type of blending operation. The mode includes a MODULATE for a lit appearance, a REPLACE for a unlit appearance, and variations of the two. NOTE The applicable values for the Mode attribute are determined by view definitions or implementer agreements. It is recommended to use the modes described in ISO IES 19775 1.2 2008 X3D Architecture and base components Edition 2, Part 1. See 18.4.3 MultiTexture http www.web3d.org x3d specifications ISO IEC 19775 1.2 X3D AbstractSpecification Part01 components texturing.html MultiTexture for recommended values. .change ifc2x4 IFC4 CHANGE New attribute replacing previous TextureType."

#:IFC.xml:25934
msgid "IfcSurfaceTexture_Parameter"
msgstr "Parameter"

msgid "IfcSurfaceTexture_Parameter_DEFINITION"
msgstr "The Parameter attribute is provided to control the appearance of a multi textures. The applicable parameters depend on the value of the Mode attribute. NOTE The applicable values for the list of Parameter attributes are determined by view definitions or implementer agreements. It is recommended to use the source and the function fields described in ISO IES 19775 1.2 2008 X3D Architecture and base components Edition 2, Part 1. See 18.4.3 MultiTexture http www.web3d.org x3d specifications ISO IEC 19775 1.2 X3D AbstractSpecification Part01 components texturing.html MultiTexture for recommended values. By convention, Parameter 1 shall then hold the source value, Parameter 2 the function value, Parameter 3 the base RGB color for select operations, and Parameter 4 the alpha value for select operations. .change ifc2x4 IFC4 CHANGE New attribute added at the end of the attribute list."

#:IFC.xml:25939
msgid "IfcSurfaceTexture_RepeatS"
msgstr "RepeatS"

msgid "IfcSurfaceTexture_RepeatS_DEFINITION"
msgstr "The RepeatS field specifies how the texture wraps in the S direction. If RepeatS is TRUE the default , the texture map is repeated outside the 0.0, 1.0 texture coordinate range in the S direction so that it fills the shape. If RepeatS is FALSE, the texture coordinates are clamped in the S direction to lie within the 0.0, 1.0 range."

#:IFC.xml:25944
msgid "IfcSurfaceTexture_RepeatT"
msgstr "RepeatT"

msgid "IfcSurfaceTexture_RepeatT_DEFINITION"
msgstr "The RepeatT field specifies how the texture wraps in the T direction. If RepeatT is TRUE the default , the texture map is repeated outside the 0.0, 1.0 texture coordinate range in the T direction so that it fills the shape. If RepeatT is FALSE, the texture coordinates are clamped in the T direction to lie within the 0.0, 1.0 range."

#:IFC.xml:25965
msgid "IfcTextFontSelect"
msgstr "IfcTextFontSelect"

msgid "IfcTextFontSelect_DEFINITION"
msgstr ""

#:IFC.xml:25966
msgid "IfcTextStyle"
msgstr "IfcTextStyle"

msgid "IfcTextStyle_DEFINITION"
msgstr "The [[IfcTextStyle]] is a presentation style for annotations that place a text in model space. The [[IfcTextStyle]] provides the text style for presentation information assigned to [[IfcTextLiteral]] s. The style is defined by color, text font characteristics, and text box characteristics. An [[IfcTextStyle]] is instantiated with TextCharacterAppearance [[IfcTextStyleForDefinedFont]] TextStyle [[IfcTextStyleTextModel]] TextFontStyle [[IfcTextStyleFontModel]] An [[IfcTextStyle]] is assigned to [[IfcTextLiteral]] through the [[IfcStyledItem]] entity. NOTE Entity adopted from font properties font family, font style, font variant, font weight, font size , Color and background properties color, background color and text properties word spacing, letter spacing, text decoration, text transform, text align, text indent, line height defined in CSS 1 .. .. .. bibliography.htm CSS1 . HISTORY New entity in IFC2x2. .change ifc2x3 IFC2x3 CHANGE The [[IfcTextStyle]] has been changed by adding TextFontStyle and different data types for TextStyle and IfcTextCharacterAppearance . .change ifc2x4 IFC4 CHANGE The [[IfcTextStyle]] has been simplified by removing old vector based text style definitions."

#:IFC.xml:25979
msgid "IfcTextStyle_TextCharacterAppearance"
msgstr "TextCharacterAppearance"

msgid "IfcTextStyle_TextCharacterAppearance_DEFINITION"
msgstr "A character style to be used for presented text. .change ifc2x4 IFC4 CHANGE Superfluous select type IfcCharacterStyleSelect has been removed."

#:IFC.xml:25991
msgid "IfcTextStyle_TextStyle"
msgstr "TextStyle"

msgid "IfcTextStyle_TextStyle_DEFINITION"
msgstr "The style applied to the text block for its visual appearance. .change ifc2x3 IFC2x3 CHANGE The attribute TextBlockStyle has been changed from SET 1 to a non aggregated optional and renamed into TextStyles . .change ifc2x4 IFC4 CHANGE The IfcTextStyleWithBoxCharacteristics and the now superfluous select type IfcTextStyleSelect have been removed."

#:IFC.xml:25967
msgid "IfcTextStyle_ModelOrDraughting"
msgstr "ModelOrDraughting"

msgid "IfcTextStyle_ModelOrDraughting_DEFINITION"
msgstr "Indication whether the length measures provided for the presentation style are model based, or draughting based. .change ifc2x4 IFC4 CHANGE New attribute."

#:IFC.xml:25972
msgid "IfcTextStyle_TextFontStyle"
msgstr "TextFontStyle"

msgid "IfcTextStyle_TextFontStyle_DEFINITION"
msgstr "The style applied to the text font for its visual appearance. It defines the font family, font style, weight and size. .change ifc2x2 IFC2x2 Add2 CHANGE The attribute TextFontStyle is a new attribute attached to [[IfcTextStyle]] ."

#:IFC.xml:26003
msgid "IfcTextStyleFontModel"
msgstr "IfcTextStyleFontModel"

msgid "IfcTextStyleFontModel_DEFINITION"
msgstr ".extDef Definition according to W3C for Cascading Style Sheets Setting font properties will be among the most common uses of style sheets. Unfortunately, there exists no well defined and universally accepted taxonomy for classifying fonts, and terms that apply to one font family may not be appropriate for others. For example, italic is commonly used to label slanted text, but slanted text may also be labeled as being Oblique , Slanted , Incline , Cursive or Kursiv . Therefore it is not a simple problem to map typical font selection properties to a specific font. .extDef Font matching Because there is no accepted, universal taxonomy of font properties, matching of properties to font faces must be done carefully. The properties are matched in a well defined order to ensure that the results of this matching process are as consistent as possible across user agents assuming that the same library of font faces is presented to each of them . 1. The user agent makes or accesses a database of relevant CSS1 properties of all the fonts of which the UA is aware. The UA may be aware of a font because it has been installed locally or it has been previously downloaded over the web. If there are two fonts with exactly the same properties, one of them is ignored. 2. At a given element and for each character in that element, the UA assembles the font properties applicable to that element. Using the complete set of properties, the UA uses the font family property to choose a tentative font family. The remaining properties are tested against the family according to the matching criteria described with each property. If there are matches for all the remaining properties, then that is the matching font face for the given element. 3. If there is no matching font face within the font family being processed by step 2, and if there is a next alternative font family in the font set, then repeat step 2 with the next alternative font family . 4. If there is a matching font face, but it doesn t contain a glyph for the current character, and if there is a next alternative font family in the font sets, then repeat step 2 with the next alternative font family . 5. If there is no font within the family selected in 2, then use a UA dependent default font family and repeat step 2, using the best match that can be obtained within the default font. The above algorithm can be optimized to avoid having to revisit the CSS1 properties for each character. The per property matching rules from 2 above are as follows 1. font style is tried first. italic will be satisfied if there is either a face in the UA s font database labeled with the CSS keyword italic preferred or oblique . Otherwise the values must be matched exactly or font style will fail. 2. font variant is tried next. normal matches a font not labeled as small caps small caps matches 1 a font labeled as small caps , 2 a font in which the small caps are synthesized, or 3 a font where all lowercase letters are replaced by upper case letters. A small caps font may be synthesized by electronically scaling uppercase letters from a normal font. 3. font weight is matched next, it will never fail. See font weight below. 4. font size must be matched within a UA dependent margin of tolerance. Typically, sizes for scalable fonts are rounded to the nearest whole pixel, while the tolerance for bitmapped fonts could be as large as 20 . Further computations, are based on the font size value that is used, not the one that is specified. The inherited Name attribute is used to define the font name, particularly in cases, where no list of font families are provided. NOTE Corresponding CSS1 definitions are Font properties font family , font style , font variant , font weight . HISTORY New entity in IFC2x3."

#:IFC.xml:26004
msgid "IfcTextStyleFontModel_FontFamily"
msgstr "FontFamily"

msgid "IfcTextStyleFontModel_FontFamily_DEFINITION"
msgstr "The value is a prioritized list of font family names and or generic family names. The first list entry has the highest priority, if this font fails, the next list item shall be used. The last list item should if possible be a generic family. .change ifc2x4 IFC4 CHANGE Attribute changed to being mandatory."

#:IFC.xml:26009
msgid "IfcTextStyleFontModel_FontSize"
msgstr "FontSize"

msgid "IfcTextStyleFontModel_FontSize_DEFINITION"
msgstr "The font size provides the size or height of the text font. NOTE The following values are allowed, [[IfcLengthMeasure]] , with positive values, the length unit is globally defined at [[IfcUnitAssignment]] . Formal Propositions"

#:IFC.xml:26014
msgid "IfcTextStyleFontModel_FontStyle"
msgstr "FontStyle"

msgid "IfcTextStyleFontModel_FontStyle_DEFINITION"
msgstr "The font style property selects between normal sometimes referred to as roman or upright , italic and oblique faces within a font family."

#:IFC.xml:26019
msgid "IfcTextStyleFontModel_FontVariant"
msgstr "FontVariant"

msgid "IfcTextStyleFontModel_FontVariant_DEFINITION"
msgstr "The font variant property selects between normal and small caps. NOTE It has been introduced for later compliance to full CSS1 support."

#:IFC.xml:26024
msgid "IfcTextStyleFontModel_FontWeight"
msgstr "FontWeight"

msgid "IfcTextStyleFontModel_FontWeight_DEFINITION"
msgstr "The font weight property selects the weight of the font. NOTE Values other then normal and bold have been introduced for later compliance to full CSS1 support."

#:IFC.xml:26031
msgid "IfcTextStyleForDefinedFont"
msgstr "IfcTextStyleForDefinedFont"

msgid "IfcTextStyleForDefinedFont_DEFINITION"
msgstr "The [[IfcTextStyleForDefinedFont]] combines the text font color with an optional background color, that fills the text box, defined by the planar extent given to the text literal. .extDef Definition according to W3C for Cascading Style Sheets These properties describe the color often called foreground color and background of an element i.e. the surface onto which the content is rendered . One can set a background color. NOTE Corresponding CSS definitions are Color and background properties color, background color . HISTORY New entity in IFC2x3. .change ifc2x3 IFC2x3 CHANGE The [[IfcTextStyleForDefinedFont]] has been added and replaces [[IfcColour]] at the IfcCharacterStyleSelect ."

#:IFC.xml:26032
msgid "IfcTextStyleForDefinedFont_BackgroundColour"
msgstr "BackgroundColour"

msgid "IfcTextStyleForDefinedFont_BackgroundColour_DEFINITION"
msgstr "This property sets the background color of an element."

#:IFC.xml:26037
msgid "IfcTextStyleForDefinedFont_Colour"
msgstr "Colour"

msgid "IfcTextStyleForDefinedFont_Colour_DEFINITION"
msgstr "This property describes the text color of an element often referred to as the foreground color ."

#:IFC.xml:26044
msgid "IfcTextStyleTextModel"
msgstr "IfcTextStyleTextModel"

msgid "IfcTextStyleTextModel_DEFINITION"
msgstr "The [[IfcTextStyleTextModel]] combines all text style properties, that affect the presentation of a text literal within a given extent. It includes the spacing between characters and words, the horizontal and vertical alignment of the text within the planar box of the extent, decorations like underline , transformations of the literal like uppercase , and the height of each text line within a multi line text block. .extDef Definition according to W3C for Cascading Style Sheets The properties defined in the text model affect the visual presentation of characters, spaces, words, and paragraphs. NOTE Corresponding CSS1 definitions are Text properties word spacing, letter spacing, text decoration, vertical align, text transform, text align, text indent, line height . HISTORY New entity in IFC2x3."

#:IFC.xml:26045
msgid "IfcTextStyleTextModel_LetterSpacing"
msgstr "LetterSpacing"

msgid "IfcTextStyleTextModel_LetterSpacing_DEFINITION"
msgstr "The length unit indicates an addition to the default space between characters. Values can be negative, but there may be implementation specific limits. The importing application is free to select the exact spacing algorithm. The letter spacing may also be influenced by justification which is a value of the TextAlign attribute . NOTE The following values are allowed, [[IfcDescriptiveMeasure]] with value normal , [[IfcRatioMeasure]] , or [[IfcLengthMeasure]] , where the length unit is globally defined at [[IfcUnitAssignment]] ."

#:IFC.xml:26050
msgid "IfcTextStyleTextModel_LineHeight"
msgstr "LineHeight"

msgid "IfcTextStyleTextModel_LineHeight_DEFINITION"
msgstr "The property sets the distance between two adjacent lines baselines. When a ratio value is specified, the line height is given by the font size of the current element multiplied with the numerical value. A value of normal sets the line height to a reasonable value for the element s font. It is suggested that importing applications set the normal value to be a ratio number in the range of 1.0 to 1.2. NOTE The following values are allowed [[IfcDescriptiveMeasure]] with value normal , or [[IfcLengthMeasure]] , with non negative values, the length unit is globally defined at [[IfcUnitAssignment]] , or [[IfcRatioMeasure]] ."

#:IFC.xml:26055
msgid "IfcTextStyleTextModel_TextAlign"
msgstr "TextAlign"

msgid "IfcTextStyleTextModel_TextAlign_DEFINITION"
msgstr "This property describes how text is aligned horizontally within the element. The actual justification algorithm used is dependent on the rendering algorithm."

#:IFC.xml:26060
msgid "IfcTextStyleTextModel_TextDecoration"
msgstr "TextDecoration"

msgid "IfcTextStyleTextModel_TextDecoration_DEFINITION"
msgstr "This property describes decorations that are added to the text of an element."

#:IFC.xml:26065
msgid "IfcTextStyleTextModel_TextIndent"
msgstr "TextIndent"

msgid "IfcTextStyleTextModel_TextIndent_DEFINITION"
msgstr "The property specifies the indentation that appears before the first formatted line. NOTE It has been introduced for later compliance to full CSS support."

#:IFC.xml:26070
msgid "IfcTextStyleTextModel_TextTransform"
msgstr "TextTransform"

msgid "IfcTextStyleTextModel_TextTransform_DEFINITION"
msgstr "This property describes how text characters may transform to upper case, lower case, or capitalized case, independent of the character case used in the text literal. NOTE It has been introduced for later compliance to full CSS support."

#:IFC.xml:26075
msgid "IfcTextStyleTextModel_WordSpacing"
msgstr "WordSpacing"

msgid "IfcTextStyleTextModel_WordSpacing_DEFINITION"
msgstr "The length unit indicates an addition to the default space between words. Values can be negative, but there may be implementation specific limits. The importing application is free to select the exact spacing algorithm. The word spacing may also be influenced by justification which is a value of the text align property . NOTE It has been introduced for later compliance to full CSS support."

#:IFC.xml:26082
msgid "IfcTextureCoordinate"
msgstr "IfcTextureCoordinate"

msgid "IfcTextureCoordinate_DEFINITION"
msgstr "The [[IfcTextureCoordinate]] is an abstract supertype of the different kinds to apply texture coordinates to geometries. For vertex based geometries an explicit assignment of 2D texture vertices to the 3D geometry points is supported by the subtype [[IfcTextureMap]] , in addition there can be a procedural description of how texture coordinates shall be applied to geometric items. If no [[IfcTextureCoordinate]] is provided for the [[IfcSurfaceTexture]] , the default mapping shall be used. NOTE See relevant subtypes of [[IfcGeometricRepresentationItem]] for default texture mapping description. NOTE The definitions of texturing has been adapted from X3D Architecture and base components, section 18 Texturing component as defined in ISO IEC 19775 1.2 HISTORY New entity in IFC2x2. .change ifc2x3 IFC2x3 CHANGE The attribute Texture is deleted. .change ifc2x4 IFC4 CHANGE The inverse attribute AnnotatedSurface isdeleted, and the attribute Maps is added."

#:IFC.xml:25951
msgid "IfcTextureCoordinate_Maps"
msgstr "Maps"

msgid "IfcTextureCoordinate_Maps_DEFINITION"
msgstr "Reference to the one or many in case of multi textures with identity transformation to geometric surfaces subtype s of [[IfcSurfaceTexture]] that are mapped to a geometric surface by the texture coordinate transformation."

#:IFC.xml:26085
msgid "IfcTextureCoordinateGenerator"
msgstr "IfcTextureCoordinateGenerator"

msgid "IfcTextureCoordinateGenerator_DEFINITION"
msgstr "The [[IfcTextureCoordinateGenerator]] describes a procedurally defined mapping function with input parameter to map 2D texture coordinates to 3D geometry vertices. The allowable Mode values and input Parameter need to be agreed upon in view definitions and implementer agreements. NOTE It is recommended to use the texture coordinate generation modes as defined in X3D. .extDef NOTE Definition according to ISO IEC 19775 1 The TextureCoordinateGenerator supports the automatic generation of texture coordinates for geometric shapes. The mode field describes the algorithm used to compute texture coordinates. .std SPHERE, CAMERASPACENORMAL, CAMERASPACEPOSITION, CAMERASPACEREFLECTIONVECTOR, SPHERE LOCAL, COORD, COORD EYE, NOISE, NOISE EYE, SPHERE REFLECT, SPHERE REFLECT LOCAL NOTE The definitions of texturing within this standard have been developed in dependence on the texture component of X3D. See ISO IEC 19775 1.2 2008 X3D Architecture and base components Edition 2, Part 1, 18 Texturing component for the definitions in the international standard. HISTORY New entity in IFC2x2. .change ifc2x2 IFC2x2 Add2 CHANGE The attribute Texture has been deleted."

#:IFC.xml:26086
msgid "IfcTextureCoordinateGenerator_Mode"
msgstr "Mode"

msgid "IfcTextureCoordinateGenerator_Mode_DEFINITION"
msgstr "The Mode attribute describes the algorithm used to compute texture coordinates. NOTE The applicable values for the Mode attribute are determined by view definitions or implementer agreements. It is recommended to use the modes described in ISO IES 19775 1.2 2008 X3D Architecture and base components Edition 2, Part 1. See 18.4.8 TextureCoordinateGenerator http www.web3d.org x3d specifications ISO IEC 19775 1.2 X3D AbstractSpecification Part01 components texturing.html TextureCoordinateGenerator for recommended values."

#:IFC.xml:26091
msgid "IfcTextureCoordinateGenerator_Parameter"
msgstr "Parameter"

msgid "IfcTextureCoordinateGenerator_Parameter_DEFINITION"
msgstr "The parameters used as arguments by the function as specified by Mode . .change ifc2x4 IFC4 CHANGE Data type restricted to REAL."

#:IFC.xml:26098
msgid "IfcTextureMap"
msgstr "IfcTextureMap"

msgid "IfcTextureMap_DEFINITION"
msgstr "An [[IfcTextureMap]] provides the mapping of the 2 dimensional texture coordinates to the surface onto which it is mapped. It is used for mapping the texture to surfaces of vertex based geometry models, such as [[IfcFacetedBrep]] [[IfcFacetedBrepWithVoids]] [[IfcFaceBasedSurfaceModel]] [[IfcShellBasedSurfaceModel]] The [[IfcTextureMap]] has a list of TextureVertex , that corresponds to the points of the outer face bound of the vertex based geometry item. The corresponding pair of lists is 1. the list of Polygon of the [[IfcFaceOuterBound]] of type [[IfcCartesianPoint]] , and 2. the list of Vertices of type [[IfcTextureVertex]] . Each [[IfcTextureVertex]] given as S, T coordinates of the 2 dimension texture coordinate system corresponds to the geometric coordinates of the [[IfcCartesianPoint]] given as 3 dimension X, Y, and Z coordinates within the object coordinate system of the geometric item . .extDef NOTE Definition according to ISO IEC 19775 1 The TextureCoordinate node is a geometry property node that specifies a set of 2D texture coordinates used by vertex based geometry nodes to map textures to vertices. NOTE In contrary to the X3D vertext based geometry, for example IndexedFaceSet and ElevationGrid, the vertext based geometry in IFC may include inner loops. The areas of inner loops have to be cut out from the texture applied to the outer loop. Figure 1 illustrates applying a texture map to a vertex based geometry. Figure 1 Texture map HISTORY New entity in IFC2x2. .change ifc2x3 IFC2x3 CHANGE The attribute Texture is deleted, and the attribute TextureMaps is added. .change ifc2x4 IFC4 CHANGE The attribute TextureMap is replaced by Vertices , and the attribute AppliedTo is added. .spec head Informal Propositions 1. The [[IfcFace]] referenced in AppliedTo shall be used by the vertex based geometry, to which this texture map is assigned to by through the [[IfcStyledItem]] ."

#:IFC.xml:26101
msgid "IfcTextureMap_Vertices"
msgstr "Vertices"

msgid "IfcTextureMap_Vertices_DEFINITION"
msgstr "List of texture coordinate vertices that are applied to the corresponding points of the polyloop defining a face bound."

#:IFC.xml:26113
msgid "IfcTextureMap_MappedTo"
msgstr "MappedTo"

msgid "IfcTextureMap_MappedTo_DEFINITION"
msgstr "The face that defines the corresponding list of points along the bounding poly loop of the face outer bound. NOTE The face may have additional inner loops. The [[IfcTextureMap]] and its Vertices only correspond with the coordinates of the IfcPolyloop representing the outer bound."

#:IFC.xml:26127
msgid "IfcTextureVertex"
msgstr "IfcTextureVertex"

msgid "IfcTextureVertex_DEFINITION"
msgstr "An [[IfcTextureVertex]] is a list of 2 S, T texture coordinates. .extDef NOTE Definition according to ISO IEC 19775 1 Each vertex based geometry node uses a set of 2D texture coordinates that map textures to vertices. Texture map values ImageTexture, PixelTexture range from 0.0, 1.0 along the S axis and T axis. However, texture coordinate values may be in the range , . Texture coordinates identify a location and thus a colour value in the texture map. The horizontal coordinate S is specified first, followed by the vertical coordinate T. If the texture map is repeated in a given direction S axis or T axis , a texture coordinate C s or t is mapped into a texture map that has N pixels in the given direction as follows Texture map location C floor C N .extDef If the texture map is not repeated, the texture coordinates are clamped to the 0.0 to 1.0 range as follows Texture map location N, if C 1.0, 0.0, if C 0.0, C N, if 0.0 C 1.0. NOTE Texture coordinates may be transformed scaled, rotated, translated by supplying a TextureTransform as a component of the texture s definition. HISTORY New entity in IFC2x2."

#:IFC.xml:26128
msgid "IfcTextureVertex_Coordinates"
msgstr "Coordinates"

msgid "IfcTextureVertex_Coordinates_DEFINITION"
msgstr "The first Coordinate 1 is the S, the second Coordinate 2 is the T parameter value."

#:IFC.xml:26135
msgid "IfcTextureVertexList"
msgstr "IfcTextureVertexList"

msgid "IfcTextureVertexList_DEFINITION"
msgstr "The [[IfcTextureVertexList]] defines an ordered collection of texture vertices. Each texture vertex is a two dimensional vertex provided by a fixed list of two texture coordinates. The attribute TexCoordsList is a two dimensional list, where first dimension is an unbounded list representing each texture vertex second dimension is a fixed list of two list members, where 1 is the S coordinate, and 2 the T coordinate of the texture vertex. NOTE The [[IfcTextureVertexList]] is introduced to provide a compact representation of an indexable representation of texture coordinates for texture maps in tessellated items. HISTORY New entity in IFC4."

#:IFC.xml:26136
msgid "IfcTextureVertexList_TexCoordsList"
msgstr "TexCoordsList"

msgid "IfcTextureVertexList_TexCoordsList_DEFINITION"
msgstr "List of texture vertices defined by S coordinate and T coordinate."

#:IFC.xml:26186
msgid "IfcFontStyle"
msgstr "IfcFontStyle"

msgid "IfcFontStyle_DEFINITION"
msgstr "The [[IfcFontStyle]] type defines whether the normal, the italic or the oblique faces within a font family shall be used. Values are normal italic oblique .extDef NOTE Definition according to Cascading Style Sheets, level 1 A value of normal selects a font that is classified as normal in the user agents font database, while oblique selects a font that is labeled oblique . A value of italic selects a font that is labeled italic , or, if that is not available, one labeled oblique . The font that is labeled oblique in the user agents font database may actually have been generated by electronically slanting a normal font. Fonts with Oblique, Slanted or Incline in their names will typically be labeled oblique in the user agents font database. Fonts with Italic, Cursive or Kursiv in their names will typically be labeled italic . NOTE Type adopted from font style defined in CSS 1 .. .. .. bibliography.htm CSS1 . HISTORY New type in IFC2x3. Formal Propositions WR1 Allowable values for font style."

#:IFC.xml:26189
msgid "IfcFontVariant"
msgstr "IfcFontVariant"

msgid "IfcFontVariant_DEFINITION"
msgstr "The [[IfcFontVariant]] type defines whether the normal or the small caps faces within a font family shall be used. Values are normal small caps .extDef NOTE Definition according to Cascading Style Sheets, level 1 Another type of variation within a font family is the small caps. In a small caps font the lower case letters look similar to the uppercase ones, but in a smaller size and with slightly different proportions. The font variant property selects that font. A value of normal selects a font that is not a small caps font, small caps selects a small caps font. It is acceptable but not required in CSS1 if the small caps font is a created by taking a normal font and replacing the lower case letters by scaled uppercase characters. As a last resort, uppercase letters will be used as replacement for a small caps font. NOTE Type adopted from font variant defined in CSS 1 .. .. .. bibliography.htm CSS1 . HISTORY New type in IFC2x3. Formal Propositions WR1"

#:IFC.xml:26192
msgid "IfcFontWeight"
msgstr "IfcFontWeight"

msgid "IfcFontWeight_DEFINITION"
msgstr "The [[IfcFontWeight]] type defines the weight of the font. Values are normal bold 100 200 300 400 500 600 700 800 900 .extDef NOTE Definition according to Cascading Style Sheets, level 1 The values 100 to 900 form an ordered sequence, where each number indicates a weight that is at least as dark as its predecessor. The keyword normal is synonymous with 400 , and bold is synonymous with 700 . Keywords other than normal and bold have been shown to be often confused with font names and a numerical scale was therefore chosen for the 9 value list. .extDef Fonts the font data typically have one or more properties whose values are names that are descriptive of the weight of a font. There is no accepted, universal meaning to these weight names. Their primary role is to distinguish faces of differing darkness within a single font family. Usage across font families is quite variant for example a font that you might think of as being bold might be described as being Regular, Roman, Book, Medium, Semi or DemiBold, Bold, or Black, depending on how black the normal face of the font is within the design. Because there is no standard usage of names, the weight property values in CSS1 are given on a numerical scale in which the value 400 or normal corresponds to the normal text face for that family. The weight name associated with that face will typically be Book, Regular, Roman, Normal or sometimes Medium . .extDef The association of other weights within a family to the numerical weight values is intended only to preserve the ordering of darkness within that family. However, the following heuristics tell how the assignment is done in typical cases If the font family already uses a numerical scale with nine values such as with OpenType , the font weights should be mapped directly. If there is both a face labeled Medium and one labeled Book, Regular, Roman or Normal, then the Medium is normally assigned to the 500 . The font labeled Bold will often correspond to the weight value 700 . If there are fewer then 9 weights in the family, the default algorithm for filling the holes is as follows. If 500 is unassigned, it will be assigned the same font as 400 . If any of the values 600 , 700 , 800 or 900 remains unassigned, they are assigned to the same face as the next darker assigned keyword, if any, or the next lighter one otherwise. If any of 300 , 200 or 100 remains unassigned, it is assigned to the next lighter assigned keyword, if any, or the next darker otherwise. .extDef The following two examples illustrate the process. Assume four weights in the Example1 family, from lightest to darkest Regular, Medium, Bold, Heavy. And assume six weights in the Example2 family Book, Medium, Bold, Heavy, Black, ExtraBlack. Note how in the second example it has been decided not to assign Example2 ExtraBlack to anything. Available faces Assignments Filling the holes Example1 Regular 400 100, 200, 300 Example1 Medium 500 Example1 Bold 700 600 Example1 Heavy 800 900Available faces Assignments Filling the holes Example2 Book 400 100, 200, 300 Example2 Medium 500 Example2 Bold 700 600 Example2 Heavy 800 Example2 Black 900 Example2 ExtraBlack none NOTE Type adopted from font weight defined in CSS 1 .. .. .. bibliography.htm CSS1 . HISTORY New type in IFC2x2 Add2. Formal Propositions WR1"

#:IFC.xml:26195
msgid "IfcPresentableText"
msgstr "IfcPresentableText"

msgid "IfcPresentableText_DEFINITION"
msgstr "[[IfcPresentableText]] is a text string used to capture the content of a text literal for the purpose of presentation. The [[IfcPresentableText]] can include multiple lines of text, for which the line feed character LF, 0x0A, should be used to separate lines. NOTE The non printable characters are converted within the standard exchange format ISO 10303 21 STEP physical file format , commonly the X 09 represents the TAB, and X 0A the LF character. NOTE The [[IfcPresentableText]] is an entity that had been adopted from ISO 10303, Industrial automation systems and integration Product data representation and exchange, Part 46 Integrated generic resources Visual presentation. NOTE Entity adapted from presentable text defined in ISO10303 46. HISTORY New type in IFC2x2."

#:IFC.xml:26198
msgid "IfcSpecularExponent"
msgstr "IfcSpecularExponent"

msgid "IfcSpecularExponent_DEFINITION"
msgstr "The [[IfcSpecularExponent]] defines the datatype for exponent determining the sharpness of the reflection . The reflection is made sharper with large values of the exponent, such as 10.0. Small values, such as 1.0, decrease the specular fall off. [[IfcSpecularExponent]] is of type REAL. NOTE The datatype relates to the definition of specular exponent in ISO 10303 46 entity surface style reflectance ambient diffuse specular. HISTORY New type in IFC2x2."

#:IFC.xml:26202
msgid "IfcSpecularRoughness"
msgstr "IfcSpecularRoughness"

msgid "IfcSpecularRoughness_DEFINITION"
msgstr "The [[IfcSpecularRoughness]] defines the datatype for the reflection resulting from the roughness of a surface through the height of surface impurities where the specular highlight is made sharper with small values for the roughness, such as 0.1. Applies to glass , metal , mirror and plastic reflection models. Larger values, close to 1.0 decrease the specular fall off. [[IfcSpecularRoughness]] is of type REAL. It is constraint to values between and including 0 and 1. NOTE The datatype relates to the definition of shiness in ISO IEC 14772 1 .. .. .. bibliography.htm IEC 14772 1 , which is the reciprocate value to the specular roughness. HISTORY New type in IFC2x2. Formal Propositions WR1 Specular roughness shall be given as a non negative value less than or equal to 1.0"

#:IFC.xml:26206
msgid "IfcTextAlignment"
msgstr "IfcTextAlignment"

msgid "IfcTextAlignment_DEFINITION"
msgstr "The [[IfcTextAlignment]] describes how text is aligned within the element. Values are left right center justify .extDef NOTE Definition according to Cascading Style Sheets, level 1 The actual justification algorithm used is user agent and human language dependent. If justify is not supported, the user agent will supply a replacement. Typically, this will be left for western languages. NOTE Type adopted from text align defined in CSS 1 .. .. .. bibliography.htm CSS1 . HISTORY New type in IFC2x3. Formal Propositions WR1 Allowable values for text alignment."

#:IFC.xml:26209
msgid "IfcTextDecoration"
msgstr "IfcTextDecoration"

msgid "IfcTextDecoration_DEFINITION"
msgstr "The [[IfcTextDecoration]] describes decorations that are added to the text of an element. Values are none underline overline line through NOTE Type adopted from text decoration defined in CSS 1 .. .. .. bibliography.htm CSS1 . HISTORY New type in IFC2x3. Formal Propositions WR1 Allowable values for text decoration."

#:IFC.xml:26212
msgid "IfcTextFontName"
msgstr "IfcTextFontName"

msgid "IfcTextFontName_DEFINITION"
msgstr "The [[IfcTextFontName]] is a list of font family names and or generic family name. .extDef NOTE Definition according to Cascading Style Sheets, level 1 Values of The name of a font family of choice. For example, gill and helvetica are font families. Values of In the example above, the last value is a generic family name. The following generic families are defined serif Example Times sans serif Example Helvetica cursive Example Zapf Chancery fantasy Example Western monospace Example Courier It is encouraged to offer a generic font family as a last alternative. NOTE Type adopted from font family defined in CSS 1 .. .. .. bibliography.htm CSS1 . HISTORY New type in IFC2x2 Add2."

#:IFC.xml:26215
msgid "IfcTextTransformation"
msgstr "IfcTextTransformation"

msgid "IfcTextTransformation_DEFINITION"
msgstr "The [[IfcTextTransformation]] describes how the cases of characters are handled. Values are capitalize uppercases the first character of each word uppercase uppercases all letters of the element lowercase lowercases all letters of the element none NOTE Type adopted from text transform defined in CSS 1 .. .. .. bibliography.htm CSS1 . HISTORY New type in IFC2x3. Formal Propositions WR1 Allowable values for text transform."

