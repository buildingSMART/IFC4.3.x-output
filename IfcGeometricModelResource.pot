# Industry Foundation Classes IFC.
        # Copyright (C) 2020 buildingSMART
        #
        #, fuzzy
        msgid ""
        msgstr ""
        "Project-Id-Version: PACKAGE VERSION\n"
        "Report-Msgid-Bugs-To: http://bugs.kde.org\n"
        "POT-Creation-Date: 2020-09-25 10:09+0200\n"
        "X-Crowdin-SourceKey: msgstr\n"
        "Language-Team: buildingSMART community\n"
        
#:IFC.xml:9939
msgid "IfcAdvancedBrep"
msgstr "IfcAdvancedBrep"

msgid "IfcAdvancedBrep_DEFINITION"
msgstr "An advanced B rep is a boundary representation model in which all faces, edges and vertices are explicitly represented. It is a solid with explicit topology and elementary or free form geometry. The faces of the B rep are of type [[IfcAdvancedFace]] . An advanced B rep has to meet the same topological constraints as the manifold solid B rep. NOTE The advanced B rep has been introduced in order to support the increasing number of applications that can define and exchange B rep models based on NURBS or other b spline surfaces. Figure 1 illustrates use of [[IfcAdvancedBrep]] for boundary representation models with b spline surfaces. The diagram shows the topological and geometric representation items that are used for advanced B reps, based on [[IfcAdvancedFace]]. Figure 1 Advanced Brep, b spline surface Figure 2 illustrates use of [[IfcAdvancedBrep]] for boundary representation models with elementary surfaces. The diagram shows the topological and geometric representation items that are used for advanced B reps, based on [[IfcAdvancedFace]]. It shows the use of [[IfcIntersectionCurve]] to provide the geometric representation of the edge curve both as 3D curve and as u,v pcurve in the parametric space of the adjacent surfaces. Figure 2 Advanced Brep, elementary surface NOTE Entity adapted from advanced brep shape representation defined in ISO 10303 514. HISTORY New entity in IFC4 .spec head Informal Propositions 1. each face is a face surface 2. each face surface has its geometry defined by an elementary surface, swept surface or a b spline surface 3. the edges used to define the boundaries of the face shall all reference an edge curve 4. each curve used to define the geometry of the faces and face bounds shall be either a conic, or a line or a polyline or a b spline curve 5. the edges used to define the face boundaries shall all be trimmed by vertices of type vertex point 6. no loop used to define a face bound shall be of the oriented subtype bSI Documentation"

#:IFC.xml:9946
msgid "IfcAdvancedBrepWithVoids"
msgstr "IfcAdvancedBrepWithVoids"

msgid "IfcAdvancedBrepWithVoids_DEFINITION"
msgstr "The [[IfcAdvancedBrepWithVoids]] is a specialization of an advanced B rep which contains one or more voids in its interior. The voids are represented as closed shells which are defined so that the shell normal point into the void. NOTE Entity adapted from advanced brep shape representation defined in ISO 10303 42. HISTORY S New entity in IFC4 .spec head Informal Propositions 1. Each void shell shall be disjoint from the outer shell and from every other void shell 2. Each void shell shall be enclosed within the outer shell but not within any other void shell. In particular the outer shell is not in the set of void shells 3. Each shell in the [[IfcManifoldSolidBrep]] shall be referenced only once. 4. All the faces of all the shells in the [[IfcAdvancedBrep]] and the [[IfcAdvancedBrepWithVoids]].Voids shall be of type [[IfcAdvancedFace]] . bSI Documentation"

#:IFC.xml:9953
msgid "IfcAdvancedBrepWithVoids_Voids"
msgstr "Voids"

msgid "IfcAdvancedBrepWithVoids_Voids_DEFINITION"
msgstr "Voids"

#:IFC.xml:9965
msgid "IfcBlock"
msgstr "IfcBlock"

msgid "IfcBlock_DEFINITION"
msgstr "The [[IfcBlock]] is a Construction Solid Geometry CSG 3D primitive. It is defined by a position and a positve distance along the three orthogonal axes. The inherited Position attribute has the IfcAxisPlacement3D type and provides SELF [[IfcCsgPrimitive3D]].Position The location and orientation of the axis system for the primitive. SELF [[IfcCsgPrimitive3D]].Position.Location The block has one vertex at location and the edges are aligned with the placement axes in the positive sense. The XLength , YLength , and ZLength attributes define the size of the [[IfcBlock]] along the three axes. Figure 1 illustrates geometric parameters of a block where the block positioned within its own placement coordinate system. The values for XLength, YLength, and ZLength are applied to the positive direction of the X, Y, and Z axis. Figure 1 Block geometry .extDef NOTE Definition according to ISO CD 10303 42 1992 A block is a solid rectangular parallelepiped, defined with a location and placement coordinate system. The block is specified by the positive lengths x, y, and z along the axes of the placement coordinate system, and has one vertex at the origin of the placement coordinate system. NOTE Entity adapted from block defined in ISO 10303 42. HISTORY New entity in IFC2x3. .use head Texture definition On each side face, textures are aligned facing upright. On the top and bottom faces, textures are aligned facing front to back. Textures are stretched or repeated to the extent of each face according to RepeatS and RepeatT . Figure 2 illustrates default texture mapping with a clamped texture RepeatS False and RepeatT False . The image on the left shows the texture where the S axis points to the right and the T axis points up. The image on the right shows the texture applied to the geometry where the X axis points back to the right, the Y axis points back to the left, and the Z axis points up. .gridtable Side Normal Origin X Origin Y Origin Z S Axis T Axis Left X 0 YLength 0 Y Z Right X XLength 0 0 Y Z Front Y 0 0 0 X Z Back Y XLength YLength 0 X Z Bottom Z 0 YLength 0 X Y Top Z 0 0 ZLength X Y Figure 2 Block textures bSI Documentation"

#:IFC.xml:9966
msgid "IfcBlock_XLength"
msgstr "XLength"

msgid "IfcBlock_XLength_DEFINITION"
msgstr "The size of the block along the placement X axis. It is provided by the inherited axis placement through SELF [[IfcCsgPrimitive3D]].Position.P 1 ."

#:IFC.xml:9971
msgid "IfcBlock_YLength"
msgstr "YLength"

msgid "IfcBlock_YLength_DEFINITION"
msgstr "The size of the block along the placement Y axis. It is provided by the inherited axis placement through SELF [[IfcCsgPrimitive3D]].Position.P 2 ."

#:IFC.xml:9976
msgid "IfcBlock_ZLength"
msgstr "ZLength"

msgid "IfcBlock_ZLength_DEFINITION"
msgstr "The size of the block along the placement Z axis. It is provided by the inherited axis placement through SELF [[IfcCsgPrimitive3D]].Position.P 3 ."

#:IFC.xml:9983
msgid "IfcBooleanClippingResult"
msgstr "IfcBooleanClippingResult"

msgid "IfcBooleanClippingResult_DEFINITION"
msgstr "A clipping result is defined as a special subtype of the general [[IfcBooleanResult]] . It constrains the operands and the operator of the Boolean result. A clipping result is the Boolean difference between a swept solid and a half space solid, or between the result of the Boolean difference and a half space solid. Hence more than one difference operation can be applied to achieve the final Boolean result. HISTORY New entity in IFC2x. bSI Documentation"

#:IFC.xml:9998
msgid "IfcBooleanOperator"
msgstr "IfcBooleanOperator"

msgid "IfcBooleanOperator_DEFINITION"
msgstr "Boolean operators that apply to the first and second Boolean operands. .extDef NOTE Definition according to ISO CD 10303 42 1992 This type defines the three Boolean operators used in the definition of CSG solids. NOTE Entity adapted from boolean operator defined in ISO 10303 42. HISTORY New entity in IFC1.5.1. bSI Documentation"

#:IFC.xml:10003
msgid "IfcBooleanResult"
msgstr "IfcBooleanResult"

msgid "IfcBooleanResult_DEFINITION"
msgstr "The [[IfcBooleanResult]] is the result of applying a Boolean operation to two operands being solids. EXAMPLE If the first operand is a block and the second operand is a solid cylinder of suitable dimensions and location, the boolean result produced with the difference operator would be a block with a circular hole. .extDef NOTE Definition according to ISO CD 10303 42 1992 A Boolean result is the result of a regularized operation on two solids to create a new solid. Valid operations are regularized union, regularized intersection, and regularized difference. For purpose of Boolean operations, a solid is considered to be a regularized set of points. The final Boolean result depends upon the operation and the two operands. In the case of the difference operator the order of the operands is also significant. The operator can be either union, intersection or difference. The effect of these operators is described below Union on two solids is the new solid that is the regularization of the set of all points that are in either the first operand or the second operand or in both. Intersection on two solids is the new solid that is the regularization of the set of all points that are in both the first operand and the second operand. The result of the difference operation on two solids is the regularization of the set of all points which are in the first operand, but not in the second operand. NOTE Corresponding STEP type boolean result defined in ISO 10303 42. HISTORY New entity in IFC1.5.1. bSI Documentation"

#:IFC.xml:10016
msgid "IfcBooleanResult_Operator"
msgstr "Operator"

msgid "IfcBooleanResult_Operator_DEFINITION"
msgstr "The Boolean operator used in the operation to create the result."

#:IFC.xml:10021
msgid "IfcBooleanResult_FirstOperand"
msgstr "FirstOperand"

msgid "IfcBooleanResult_FirstOperand_DEFINITION"
msgstr "The first operand to be operated upon by the Boolean operation."

#:IFC.xml:10026
msgid "IfcBooleanResult_SecondOperand"
msgstr "SecondOperand"

msgid "IfcBooleanResult_SecondOperand_DEFINITION"
msgstr "The second operand specified for the operation."

#:IFC.xml:10031
msgid "IfcBooleanResult_Dim"
msgstr "Dim"

msgid "IfcBooleanResult_Dim_DEFINITION"
msgstr "The space dimensionality of this entity. It is identical with the space dimensionality of the first operand. A where rule ensures that both operands have the same space dimensionality."

#:IFC.xml:10040
msgid "IfcBoundingBox"
msgstr "IfcBoundingBox"

msgid "IfcBoundingBox_DEFINITION"
msgstr "The [[IfcBoundingBox]] defines an orthogonal box oriented parallel to the axes of the object coordinate system in which it is defined. It is defined by a Corner being a three dimensional Cartesian point and three length measures defining the X, Y and Z parameters of the box in the direction of the positive axes. NOTE Any subtype of [[IfcProduct]] having a product shape representation may have a bounding box representation. The Box representation identifier defined at [[IfcShapeRepresentation]] utilizes the [[IfcBoundingBox]] as the simpliest 3D shape representation. As shown in Figure 1, the [[IfcBoundingBox]] is defined with its own location which can be used to place the [[IfcBoundingBox]] relative to the geometric coordinate system. The [[IfcBoundingBox]] is defined by the lower left corner Corner and the upper right corner XDim, YDim, ZDim measured within the parent co ordinate system . Figure 1 Bounding box NOTE Corresponding STEP type box domain defined in ISO 10303 42. HISTORY New entity in IFC1.0. bSI Documentation"

#:IFC.xml:10063
msgid "IfcBoundingBox_Corner"
msgstr "Corner"

msgid "IfcBoundingBox_Corner_DEFINITION"
msgstr "Corner"

#:IFC.xml:10041
msgid "IfcBoundingBox_XDim"
msgstr "XDim"

msgid "IfcBoundingBox_XDim_DEFINITION"
msgstr "Length attribute measured along the edge parallel to the X Axis"

#:IFC.xml:10046
msgid "IfcBoundingBox_YDim"
msgstr "YDim"

msgid "IfcBoundingBox_YDim_DEFINITION"
msgstr "Width attribute measured along the edge parallel to the Y Axis"

#:IFC.xml:10051
msgid "IfcBoundingBox_ZDim"
msgstr "ZDim"

msgid "IfcBoundingBox_ZDim_DEFINITION"
msgstr "Height attribute measured along the edge parallel to the Z Axis ."

#:IFC.xml:10056
msgid "IfcBoundingBox_Dim"
msgstr "Dim"

msgid "IfcBoundingBox_Dim_DEFINITION"
msgstr "The space dimensionality of this class, it is always 3."

#:IFC.xml:10087
msgid "IfcBoxedHalfSpace"
msgstr "IfcBoxedHalfSpace"

msgid "IfcBoxedHalfSpace_DEFINITION"
msgstr "The [[IfcBoxedHalfSpace]] is used as its supertype [[IfcHalfSpaceSolid]] only within Boolean operations. It divides the domain into exactly two subsets, where the domain in question is that of the attribute Enclosure . The purpose of the attribute Enclosure is to provide a search box for the other operand in the Boolean operation. It shall be sufficiently large to fully enclose the resulting solid after the Boolean operation with the half space. It however does not alter the final result. The result of the Boolean operation would be the same, as if executed by the supertype [[IfcHalfSpaceSolid]] . See Figure 1 below. correct use of enclosure .. .. .. .. .. .. figures ifcboxedhalfspace 01.png Figure 1 Boxed half space operands The [[IfcBoundingBox]] that provides the enclosure is given for the convenience of the receiving application to enable the use of size box comparison for efficiency for example, to check first whether size boxes intersect, if not no calculations has to be done to check whether the solids of the entities intersect . The Enclosure therefore helps to prevent dealing with infinite size related issues. The enclosure box is positioned within the object coordinate system, established by the ObjectPlacement of the element represented for example, by [[IfcLocalPlacement]] . Figure 2 shows the Enclosure box being sufficiently large to fully enclose the Boolean result. Figure 2 Boxed half space geometry .extDef NOTE Definition according to ISO CD 10303 42 1992 This entity is a subtype of the half space solid which is trimmed by a surrounding rectangular box. The box has its edges parallel to the coordinate axes of the geometric coordinate system. The purpose of the box is to facilitate CSG computations by producing a solid of finite size. NOTE Entity adapted from boxed half space defined in ISO 10303 42. HISTORY New entity in IFC1.5.1 .change ifc2x4 IFC4 CHANGE Usage correct, position coordinate system for Enclosure is the object coordinate system. bSI Documentation"

#:IFC.xml:10075
msgid "IfcBoxedHalfSpace_Enclosure"
msgstr "Enclosure"

msgid "IfcBoxedHalfSpace_Enclosure_DEFINITION"
msgstr "Enclosure"

#:IFC.xml:10094
msgid "IfcCartesianPointList"
msgstr "IfcCartesianPointList"

msgid "IfcCartesianPointList_DEFINITION"
msgstr "The [[IfcCartesianPointList]] is the abstract supertype of list of points. NOTE The [[IfcCartesianPointList]] is introduced to provide a compact representation of potentially larger list of points, such as in point clouds, and in indexable representation of points. HISTORY New entity in IFC4. bSI Documentation"

#:IFC.xml:10095
msgid "IfcCartesianPointList_Dim"
msgstr "Dim"

msgid "IfcCartesianPointList_Dim_DEFINITION"
msgstr "The space dimensionality of this class, either 2 or 3, depending on the sub type."

#:IFC.xml:10114
msgid "IfcCartesianPointList2D"
msgstr "IfcCartesianPointList2D"

msgid "IfcCartesianPointList2D_DEFINITION"
msgstr "The [[IfcCartesianPointList2D]] defines an ordered collection of two dimentional Cartesian points. Each Cartesian point is provided as an two dimensional point by a fixed list of two coordinates. The attribute CoordList is a two dimensional list, where first dimension is an unbounded list representing each 2D Cartesian point second dimension is a fixed list of two list members, where 1 is the x coordinate, and 2 the y coordinate of the Cartesian point. NOTE The [[IfcCartesianPointList2D]] is introduced to provide a compact representation of larger list of points, such as in indexable representation of points used as vertices in poly curves. HISTORY New entity in IFC4 ADD1. bSI Documentation"

#:IFC.xml:10115
msgid "IfcCartesianPointList2D_CoordList"
msgstr "CoordList"

msgid "IfcCartesianPointList2D_CoordList_DEFINITION"
msgstr "Two dimensional list of Cartesian points provided by two coordinates."

#:IFC.xml:10120
msgid "IfcCartesianPointList2D_TagList"
msgstr "TagList"

msgid "IfcCartesianPointList2D_TagList_DEFINITION"
msgstr "List of tags corresponding to each point that may be used to identify a basis curve according to the Tag attribute at [[IfcOffsetCurveByDistances]] or [[IfcAlignmentCurve]] ."

#:IFC.xml:10127
msgid "IfcCartesianPointList3D"
msgstr "IfcCartesianPointList3D"

msgid "IfcCartesianPointList3D_DEFINITION"
msgstr "The [[IfcCartesianPointList3D]] defines an ordered collection of three dimentional Cartesian points. Each Cartesian point is provided as an three dimensional point by a fixed list of three coordinates. The attribute CoordList is a two dimensional list, where first dimension is an unbounded list representing each 3D Cartesian point second dimension is a fixed list of three list members, where 1 is the x coordinate, 2 the y coordinate and 3 the z coordinate of the Cartesian point. NOTE The [[IfcCartesianPointList]] is introduced to provide a compact representation of larger list of points, such as in point clouds, and in indexable representation of points used as vertices in tessellated items or poly curves. HISTORY New entity in IFC4. bSI Documentation"

#:IFC.xml:10128
msgid "IfcCartesianPointList3D_CoordList"
msgstr "CoordList"

msgid "IfcCartesianPointList3D_CoordList_DEFINITION"
msgstr "Two dimensional list of Cartesian points provided by three coordinates."

#:IFC.xml:10133
msgid "IfcCartesianPointList3D_TagList"
msgstr "TagList"

msgid "IfcCartesianPointList3D_TagList_DEFINITION"
msgstr "List of tags corresponding to each point that may be used to identify a basis curve according to the Tag attribute at [[IfcOffsetCurveByDistances]] or [[IfcAlignmentCurve]] ."

#:IFC.xml:10152
msgid "IfcCsgPrimitive3D"
msgstr "IfcCsgPrimitive3D"

msgid "IfcCsgPrimitive3D_DEFINITION"
msgstr "[[IfcCsgPrimitive3D]] is an abstract supertype of all three dimensional primitives used as either tree root item, or as Boolean results within a CSG solid model. All 3D CSG primitives are defined within a three dimensional placement coordinate system. HISTORY New entity in IFC2x3. bSI Documentation"

#:IFC.xml:10160
msgid "IfcCsgPrimitive3D_Position"
msgstr "Position"

msgid "IfcCsgPrimitive3D_Position_DEFINITION"
msgstr "Position"

#:IFC.xml:10153
msgid "IfcCsgPrimitive3D_Dim"
msgstr "Dim"

msgid "IfcCsgPrimitive3D_Dim_DEFINITION"
msgstr "The space dimensionality of this geometric representation item, it is always 3."

#:IFC.xml:10174
msgid "IfcCsgSolid"
msgstr "IfcCsgSolid"

msgid "IfcCsgSolid_DEFINITION"
msgstr "An [[IfcCsgSolid]] is the representation of a 3D shape using constructive solid geometry model. It is represented by a single 3D CSG primitive, or as a result of a Boolean operation. The operants of a Boolean operation can be Boolean operations themselves forming a CSG tree. The following volumes can be parts of the CSG tree Boundary representation models, such as [[IfcFacetedBrep]] , [[IfcFacetedBrepWithVoids]] , Closed tesselated representation modles, such as [[IfcPolygonalFaceSet]] , [[IfcTriangulatedFaceSet]] , Swept area solids, such as [[IfcExtrudedAreaSolid]] , [[IfcRevolvedAreaSolid]] , and their subtypes for tapering, Advanced swept area solids, such as [[IfcSurfaceCurveSweptAreaSolid]] , [[IfcFixedReferenceSweptAreaSolid]] , [[IfcSweptDiskSolid]] Half space solids, such as [[IfcHalfSpaceSolid]] and its subtypes , and CSG primitives, the subtypes of [[IfcCsgPrimitive3D]] . .extDef NOTE Definition according to ISO CD 10303 42 1992 A solid represented as a CSG model is defined by a collection of so called primitive solids, combined using regularized Boolean operations. The allowed operations are intersection, union, and difference. As a special case a CSG solid can also consists of a single CSG primitive. A CSG solid requires two kinds of information for its complete definition geometric and structural. The geometric information is conveyed by solid models. These typically primitive volumes such as cylinders, wedges and extrusions, but can include general B Rep models. Solid models can also be half space solids. The structural information is in a tree strictly an acyclic directed graph of Boolean result and CSG solids, which represent a recipe for building the solid. The terminal nodes are the geometric primitives and other solids. Every CSG solid has precisely one Boolean result associated with it which is the root of the tree that defines the solid. There may be further Boolean results within the tree as operands . The significance of a CSG solid entity is that the solid defined by the associated tree is thus identified as a significant object itself, and in this way it is distinguished from other Boolean result entities representing intermediate results during the construction process. NOTE Entity adapted from csg solid is defined in ISO 10303 42. HISTORY New entity in IFC1.5.1 bSI Documentation"

#:IFC.xml:10175
msgid "IfcCsgSolid_TreeRootExpression"
msgstr "TreeRootExpression"

msgid "IfcCsgSolid_TreeRootExpression_DEFINITION"
msgstr "Boolean expression of primitives and regularized operators describing the solid. The root of the tree of Boolean expressions is given explicitly as an [[IfcBooleanResult]] entitiy or as a primitive subtypes of [[IfcCsgPrimitive3D]] ."

#:IFC.xml:10182
msgid "IfcExtrudedAreaSolid"
msgstr "IfcExtrudedAreaSolid"

msgid "IfcExtrudedAreaSolid_DEFINITION"
msgstr "The [[IfcExtrudedAreaSolid]] is defined by sweeping a cross section provided by a profile definition. The direction of the extrusion is given by the ExtrudedDirection attribute and the length of the extrusion is given by the Depth attribute. If the planar area has inner boundaries holes defined , then those holes shall be swept into holes of the solid. The resulting solid is positioned by the [[IfcSweptAreaSolid]] . Position relative to the object coordinate system. If provided, it allows to reposition the extruded solid. If not provided, it defaults to the current object coordinate system. The ExtrudedDirection is given within the position coordinate system as defined by [[IfcSweptAreaSolid]] . Position . The extruded direction can be any direction which is not perpendicular to the z axis of the position coordinate system. EXAMPLE Figure 1 illustrates geometric parameters of the extruded area solid. The extruded area solid defines the extrusion of a 2D area by an direction and depth. The result is a solid. The profile to be swept is defined as a 2D primitive, here [[IfcRectangleProfileDef]], that is placed relative to the xy plane of object coordinate system since no 2D profile position coordinate system is provided, here [[IfcParameterizedProfileDef]].Position NIL, the profile is positioned without transformation into the xy plane of the object coordinate system by default, centric at 0.,0. with no rotation The resulting swept solid is not repositioned, as no position coordinate system is provided, here [[IfcSweptAreaSolid]].Position NIL. Figure 1 Extruded area solid geometry EXAMPLE Figure 2 illustrates geometric parameters and additional positioning parameters of the extruded area solid. The extruded area solid defines the extrusion of a 2D area by an direction and depth. The 2D area, provided by a parameterized profile definition, can be positioned relative to the object coordinate system other then by default at 0.,0. with no rotation . The result is a solid that can be repositioned within the object coordinate system. The profile to be swept is defined as a 2D primitive, here [[IfcRectangleProfileDef]], that is placed relative to the xy plane of object coordinate system a 2D profile position coordinate system is provided that positions the profile relative to the xy plane here at a corner of the rectangle The resulting swept solid is repositioned, here it is moved into local z and rotated by 15 along the y axis. Figure 2 Repositioned extruded area solid geometry .extDef NOTE Definition according to ISO CD 10303 42 1992 An extruded area solid is a solid defined by sweeping a bounded planar surface. The direction of translation is defined by a direction vector, and the length of the translation is defined by a distance depth. The planar area may have holes which will sweep into holes in the solid. NOTE Entity adapted from extruded area solid defined in ISO 10303 42. HISTORY New entity in IFC1.5 .use head Texture use definition For side faces, textures are aligned facing upright continuously along the sides with origin at the first point of an arbitrary profile, and following the outer bound of the profile counter clockwise as seen from above . For parameterized profiles, the origin is defined at the Y extent for rounded profiles having no sharp edge and the first sharp edge counter clockwise from the Y extent for all other profiles. Textures are stretched or repeated on each side along the outer boundary of the profile according to RepeatS . Textures are stretched or repeated on each side along the extrusion axis according to RepeatT . For top and bottom caps, textures are aligned facing front to back, with the origin at the minimum X and Y extent. Textures are stretched or repeated on the top and bottom to the extent of each face according to RepeatS and RepeatT . For profiles with voids, textures are aligned facing upright along the inner side with origin at the first point of an arbitrary profile, and following the inner bound of the profile clockwise as seen from above . For parameterized profiles, the origin of inner sides is defined at the Y extent for rounded profiles having no sharp edge such as hollow ellipses or rounded rectangles and the first sharp edge clockwise from the Y extent for all other profiles. EXAMPLE Figure 3 illustrates default texture mapping with a repeated texture RepeatS True and RepeatT True . The image on the left shows the texture where the S axis points to the right and the T axis points up. The image on the right shows the texture applied to the geometry where the X axis points back to the right, the Y axis points back to the left, and the Z axis points up. For an [[IfcExtrudedAreaSolid]] having a profile of [[IfcIShapeProfileDef]], the side texture coordinate origin is the first corner counter clockwise from the Y axis, which equals 0.5 [[IfcIShapeProfileDef]].OverallWidth, 0.5 [[IfcIShapeProfileDef]].OverallDepth , while the top end cap texture coordinates start at 0.5 [[IfcIShapeProfileDef]].OverallWidth, 0.5 [[IfcIShapeProfileDef]].OverallDepth . Figure 3 Extruded area solid textures bSI Documentation"

#:IFC.xml:10194
msgid "IfcExtrudedAreaSolid_ExtrudedDirection"
msgstr "ExtrudedDirection"

msgid "IfcExtrudedAreaSolid_ExtrudedDirection_DEFINITION"
msgstr "ExtrudedDirection"

#:IFC.xml:10187
msgid "IfcExtrudedAreaSolid_Depth"
msgstr "Depth"

msgid "IfcExtrudedAreaSolid_Depth_DEFINITION"
msgstr "The distance the surface is to be swept along the ExtrudedDirection ."

#:IFC.xml:10206
msgid "IfcExtrudedAreaSolidTapered"
msgstr "IfcExtrudedAreaSolidTapered"

msgid "IfcExtrudedAreaSolidTapered_DEFINITION"
msgstr "[[IfcExtrudedAreaSolidTapered]] is defined by sweeping a cross section along a linear spine. The cross section may change along the sweep from the shape of the start cross section into the shape of the end cross section. The resulting solid is bounded by three or more faces A start face, an end face each defined by start and end planes and sections , and one or more lateral faces. Each lateral face is a ruled surface defined by a pair of corresponding edges of the start and end section. NOTE Given that the start and end section is provided by a polygon, the corresponding vertices of the start and end cross section are connected, forming a quadrilateral polygon between each pair of corresponding vertices. The surface defined by the bounding quadrilateral polygon is a ruled surface, that could be approximated by triangulation. The linear spine is defined by Start point SELF [[IfcSweptAreaSolid]].Position.Location Direction SELF [[IfcExtrudedAreaSolid]].ExtrudedDirection Distance SELF [[IfcExtrudedAreaSolid]].Depth The start cross section is defined by SELF [[IfcSweptAreaSolid]].SweptArea A bounded planar surface lying in the XY plane of the position coordinate system defined by SELF [[IfcSweptAreaSolid]].Position.P 1 and SELF [[IfcSweptAreaSolid]].Position.P 2 The linear spine starts at the plane of the start cross section. The spine is not necessarily perpendicular to the plane. The end cross section is defined by EndSweptArea A bounded planar surface lying in the XY plane of the position coordinate system defined by translating the start position coordinates provided by SELF [[IfcSweptAreaSolid]].Position along the spine direction by the spine distance. The plane of the end cross section is coplanar to the plane of the start cross section. The end cross section is topologically similar to the start cross section i.e. having the same number of vertices and edges . The end cross section can either be defined by the same paramteric profile using different parameter values, or by a 2D Cartesian transformation of the start profile within the end cross section plane. In case of two parameterized profiles the shape is constructed as follows The end profile, defined by a cross section based on the same profile paramterization as the start profile, is translated by the spine distance along the spine direction. It may be shifted within the XY plane of the end postion coordinate system and may be twisted using the rotation parameter. The shift and rotation parameter are provided by the end cross section being of type [[IfcParameterizedProfileDef]] , where Shift is EndSweptArea [[IfcParameterizedProfileDef]].Position.Location Rotation is EndSweptArea [[IfcParameterizedProfileDef]].Position.RefDirection Corresponding vertices of the start and end cross section are connected. Lateral faces are constructed as ruled surfaces between corresponding edges of start and end cross section. In case of Cartesian transformation of the start cross section the shape is constructed as follows The cross section curve, which starts as a curve in the XY plane of the position coordinate system, is first scaled about the origin by the scale parameter. It is then translated by the spine distance along the spine direction. It maybe twisted by using the rotation parameter. The scale and rotation parameter are provided by the end cross section being of type [[IfcDerivedProfileDef]] , where Scale is EndSweptArea [[IfcDerivedProfileDef]].Operator.Scale Rotation is EndSweptArea [[IfcDerivedProfileDef]].Operator.Axis1 Corresponding vertices of the start and end cross section are connected. Lateral faces are constructed as ruled surfaces between corresponding edges of start and end cross section. HISTORY New entity in IFC4. .spec head Informal Propositions 1. Mirroring within [[IfcDerivedProfileDef]].Operator shall not be used bSI Documentation"

#:IFC.xml:10213
msgid "IfcExtrudedAreaSolidTapered_EndSweptArea"
msgstr "EndSweptArea"

msgid "IfcExtrudedAreaSolidTapered_EndSweptArea_DEFINITION"
msgstr "EndSweptArea"

#:IFC.xml:10225
msgid "IfcFaceBasedSurfaceModel"
msgstr "IfcFaceBasedSurfaceModel"

msgid "IfcFaceBasedSurfaceModel_DEFINITION"
msgstr "The [[IfcFaceBasedSurfaceModel]] represents the a shape by connected face sets. The connected faces have a dimensionality 2 and are placed in a coordinate space of dimensionality 3. .extDef NOTE Definition according to ISO CD 10303 42 1992 A face based surface model is described by a set of connected face sets of dimensionality 2. The connected face sets shall not intersect except at edges and vertices, except that a face in one connected face set may overlap a face in another connected face set, provided the face boundaries are identical. There shall be at least one connected face set. A connected face set may exist independently of a surface model. NOTE Entity adapted from face based surface model defined in ISO 10303 42. HISTORY New entity in IFC2x. .spec head Informal Propositions 1. The connected face sets shall not overlap or intersect except at common faces, edges or vertices. 2. The fbsm faces have dimensionality 2. .deprecated IFC4 CHANGE The entity has been deprecated and shall not be used. The entity [[IfcFacetedBrep]] shall be used instead. bSI Documentation"

#:IFC.xml:10234
msgid "IfcFaceBasedSurfaceModel_FbsmFaces"
msgstr "FbsmFaces"

msgid "IfcFaceBasedSurfaceModel_FbsmFaces_DEFINITION"
msgstr "FbsmFaces"

#:IFC.xml:10226
msgid "IfcFaceBasedSurfaceModel_Dim"
msgstr "Dim"

msgid "IfcFaceBasedSurfaceModel_Dim_DEFINITION"
msgstr "The space dimensionality of this class, it is always 3."

#:IFC.xml:10246
msgid "IfcFacetedBrep"
msgstr "IfcFacetedBrep"

msgid "IfcFacetedBrep_DEFINITION"
msgstr "The [[IfcFacetedBrep]] is a manifold solid brep with the restriction that all faces are planar and bounded polygons. NOTE Use of [[IfcFacetedBrep]] is restricted for boundary representation models with planar surfaces only. Those surfaces are implicitly represented by the bounding polygons. The diagram shows the topological and geometric representation items that are used for faceted breps. Each [[IfcCartesianPoint]], used within the [[IfcFacetedBrep]] shall be referenced three times by an [[IfcPolyLoop]] bounding a different [[IfcFace]]. Figure 1 Diagram showing the use of [[IfcFacetedBrep]] .extDef NOTE Definition according to ISO CD 10303 42 1992 A faceted B rep is a simple form of boundary representation model in which all faces are planar and all edges are straight lines. Unlike the B rep model, edges and vertices are not represented explicitly in the model but are implicitly available through the poly loop entity. A faceted B rep has to meet the same topological constraints as the manifold solid B rep. .extDef The faceted B rep has been introduced in order to support the larger number of systems that allow boundary type solid representations with planar surfaces only. NOTE Entity adapted from manifold solid brep defined in ISO 10303 42. HISTORY New entity in IFC1.0 .spec head Informal Propositions 1. All the bounding loops of all the faces of all the shells in the [[IfcFacetedBrep]] shall be of type [[IfcPolyLoop]] . 2. All vertices shall be referenced by all polyloops, sharing the vertex. I.e., each Cartesian point shall be references by at least three polyloops. bSI Documentation"

#:IFC.xml:10249
msgid "IfcFacetedBrepWithVoids"
msgstr "IfcFacetedBrepWithVoids"

msgid "IfcFacetedBrepWithVoids_DEFINITION"
msgstr "The [[IfcFacetedBrepWithVoids]] is a specialization of a faceted B rep which contains one or more voids in its interior. The voids are represented as closed shells which are defined so that the shell normal point into the void. NOTE Entity adapted from brep with voids AND faceted brep defined in ISO 10303 42. HISTORY New entity in IFC1.0 .change ifc2x4 IFC4 CHANGE Subtyping changed from [[IfcManifoldSolidBrep]] to [[IfcFacetedBrep]] with upward compatibility for file based exchange. .spec head Informal Propositions 1. Each void shell shall be disjoint from the outer shell and from every other void shell 2. Each void shell shall be enclosed within the outer shell but not within any other void shell. In particular the outer shell is not in the set of void shells 3. Each shell in the [[IfcManifoldSolidBrep]] shall be referenced only once. 4. All the bounding loops of all the faces of all the shells in the [[IfcFacetedBrep]] shall be of type [[IfcPolyLoop]] . bSI Documentation"

#:IFC.xml:10252
msgid "IfcFacetedBrepWithVoids_Voids"
msgstr "Voids"

msgid "IfcFacetedBrepWithVoids_Voids_DEFINITION"
msgstr "Voids"

#:IFC.xml:10264
msgid "IfcFixedReferenceSweptAreaSolid"
msgstr "IfcFixedReferenceSweptAreaSolid"

msgid "IfcFixedReferenceSweptAreaSolid_DEFINITION"
msgstr "An [[IfcFixedReferenceSweptAreaSolid]] is a type of swept area solid which is the result of sweeping an area along a Directrix . The swept area is provided by a subtype of [[IfcProfileDef]] . The profile is placed by an implicit cartesian transformation operator at the start point of the sweep, where the profile normal agrees to the tangent of the directrix at this point, and the profile s x axis agrees to the FixedReference direction. The orientation of the curve during the sweeping operation is controlled by the FixedReference direction. The SweptArea is swept along the Directrix in such a way that the origin of the local coordinate system used to define the SweptArea is on the Directrix and the local X axis is in the direction of the projection of FixedReference onto the normal plane to the directrix at this point. The resulting solid has the property that the cross section of the surface by the normal plane to the Directrix at any point is a copy of the SweptArea . The resulting swept solid is placed by the Position coordinate system. The Directrix and the ReferenceSurface are positioned within the object coordinate system. The start of the sweeping operation is at the StartParam , the parameter value is provided based on the curve parameterization. If no StartParam is provided the start defaults to the begin of the directrix. The end of the sweeping operation is at the EndParam , the parameter value is provided based on the curve parameterization. If no EndParam is provided the end defaults to the end of the directrix. NOTE The StartParam and the EndParam are not normalized by default, they depend upon the parameterization of the curve. However using the [[IfcReparametrisedCompositeCurveSegment]] within an [[IfcCompositeCurve]] as the directrix allows to explicitly reparameterize the underlying sweeping curve. EXAMPLE The reference surface is any surface plane, cylindric, composite situated in 3D space and positioned in the object coordinate system. In many cases, it is a surface of extrusion. The directrix lies on the surface, often defined as a p curve at this reference surface. At any point of the directrix, a plane can be constructed. The origin of the position coordinate system lies at the directrix. The Axis3 the z axis, or normal of the position coordinate system is identical to the tangent of the directrix at this point, the Axis1 the x axis, or u of the position coordinate system is identical to the FixedReference direction. The Axis2 the y axis, or v is constructed. In this case the resulting swept solid is not repositioned. The orientation of the SweptArea as it sweeps along the Directrix is precisely defined by a CartesianTransformationOperator3d with attributes LocalOrigin as point 0 0 0 , Axis1 as the FixedReference . Axis3 as the direction of the tangent vector t at the point of the Directrix with parameter u . The remaining attributes are defaulted to define a corresponding transformation matrix T u , which varies with the Directrix parameter u . NOTE The geometric shape of the solid is not dependent upon the curve parameterization the volume depends upon the area swept and the length of the Directrix . NOTE Entity adapted from fixed reference swept surface defined in ISO 10303 42. HISTORY New entity in IFC4. .spec head Informal Propositions 1. The SweptArea shall lie in the plane z 0. 2. The FixedReference shall not be parallel to a tangent vector to the directrix at any point along this curve. 3. The Directrix curve shall be tangent continuous. bSI Documentation"

#:IFC.xml:10267
msgid "IfcFixedReferenceSweptAreaSolid_FixedReference"
msgstr "FixedReference"

msgid "IfcFixedReferenceSweptAreaSolid_FixedReference_DEFINITION"
msgstr "FixedReference"

#:IFC.xml:10279
msgid "IfcGeometricCurveSet"
msgstr "IfcGeometricCurveSet"

msgid "IfcGeometricCurveSet_DEFINITION"
msgstr "The [[IfcGeometricCurveSet]] is used for the exchange of shape representation consisting of an collection of 2D or 3D points and curves only. .extDef NOTE Definition according to ISO CD 10303 42 1992 A geometric curve set is a collection of two or three dimensional points and curves. NOTE Entity adapted from geometric curve set defined in ISO 10303 42. HISTORY New entity in IFC2x2. bSI Documentation"

#:IFC.xml:10286
msgid "IfcGeometricSet"
msgstr "IfcGeometricSet"

msgid "IfcGeometricSet_DEFINITION"
msgstr "The [[IfcGeometricSet]] is used for the exchange of shape representation consisting of 2D or 3D points, curves, and surfaces, which do not have a topological structure such as connected face sets or shells , are not tessellated and are not solid models such as swept solids, CSG or Brep . .extDef NOTE Definition from ISO CD 10303 42 This entity is intended for the transfer of models when a topological structure is not available. NOTE Entity adapted from geometric set defined in ISO 10303 42. HISTORY New entity in IFC2x. bSI Documentation"

#:IFC.xml:10291
msgid "IfcGeometricSet_Elements"
msgstr "Elements"

msgid "IfcGeometricSet_Elements_DEFINITION"
msgstr "The geometric elements which make up the geometric set, these may be points, curves or surfaces but are required to be of the same coordinate space dimensionality."

#:IFC.xml:10296
msgid "IfcGeometricSet_Dim"
msgstr "Dim"

msgid "IfcGeometricSet_Dim_DEFINITION"
msgstr "The space dimensionality of this class, it is identical to the first element in the set. A where rule ensures that all elements have the same dimensionality."

#:IFC.xml:10303
msgid "IfcHalfSpaceSolid"
msgstr "IfcHalfSpaceSolid"

msgid "IfcHalfSpaceSolid_DEFINITION"
msgstr "A half space solid divides the domain into two by a base surface. Normally, the base surface is a plane and devides the infinitive space into two and indicates the side of the half space by agreeing or disagreeing to the normal of the plane. Figure 1 illustrates the definition of the [[IfcHalfSpaceSolid]] within a given coordinate system. The base surface is given by an unbounded plane, the red boundary is shown for visualization purposes only. half space solid .. .. .. .. .. .. figures ifchalfspacesolid layout1.gif Figure 1 Half space solid geometry .extDef NOTE Definition according to ISO CD 10303 42 1992 A half space solid is defined by the half space which is the regular subset of the domain which lies on one side of an unbounded surface. The side of the surface which is in the half space is determined by the surface normal and the agreement flag. If the agreement flag is TRUE, then the subset is the one the normal points away from. If the agreement flag is FALSE, then the subset is the one the normal points into. For a valid half space solid the surface shall divide the domain into exactly two subsets. Also, within the domain the surface shall be manifold and all surface normals shall point into the same subset. NOTE A half space is not a subtype of solid model, half space solids are only useful as operands in Boolean expressions. NOTE Entity adapted from half space solid defined in ISO 10303 42. HISTORY New entity in IFC1.5 .spec head Informal Propositions 1. The base surface shall divide the domain into exactly two subsets. If the half space solid is of subtype boxed half space [[IfcBoxedHalfSpace]] , the domain in question is that of the attribute enclosure. In all other cases the domain is all of space and the base surface shall be unbounded. 2. The base surface shall be an unbounded surface subtype of [[IfcElementarySurface]] . bSI Documentation"

#:IFC.xml:10316
msgid "IfcHalfSpaceSolid_BaseSurface"
msgstr "BaseSurface"

msgid "IfcHalfSpaceSolid_BaseSurface_DEFINITION"
msgstr "BaseSurface"

#:IFC.xml:10304
msgid "IfcHalfSpaceSolid_AgreementFlag"
msgstr "AgreementFlag"

msgid "IfcHalfSpaceSolid_AgreementFlag_DEFINITION"
msgstr "The agreement flag is TRUE if the normal to the BaseSurface points away from the material of the [[IfcHalfSpaceSolid]]. Otherwise it is FALSE."

#:IFC.xml:10309
msgid "IfcHalfSpaceSolid_Dim"
msgstr "Dim"

msgid "IfcHalfSpaceSolid_Dim_DEFINITION"
msgstr "The space dimensionality of this class, it is always 3"

#:IFC.xml:10329
msgid "IfcIndexedPolygonalFace"
msgstr "IfcIndexedPolygonalFace"

msgid "IfcIndexedPolygonalFace_DEFINITION"
msgstr "The [[IfcIndexedPolygonalFace]] is a compact representation of a planar face being part of a face set. The vertices of the polygonal planar face are provided by 3 or more Cartesian points, defined by indices that point into an [[IfcCartesianPointList3D]] , either direcly, or via the PnIndex , if provided at [[IfcPolygonalFaceSet]] . Figure 1 shows an [[IfcIndexedPolygonalFace]] at an [[IfcPolygonalFaceSet]] not using PnIndex the default . [[IfcIndexedPolygonalFace]] .. .. .. .. .. .. figures ifcindexedpolygonalface 01.png Figure 1 Polygonal face geometry provided by indices into a point list Figure 2 shows an [[IfcIndexedPolygonalFace]] at an [[IfcPolygonalFaceSet]] using PnIndex . [[IfcIndexedPolygonalFace]] us ing PnIndex .. .. .. .. .. .. figures ifcindexedpolygonalface 02.png Figure 2 Polygonal face geometry provided by indices into a point list HISTORY New entity in IFC4 Addendum 2. bSI Documentation"

#:IFC.xml:10337
msgid "IfcIndexedPolygonalFace_ToFaceSet"
msgstr "ToFaceSet"

msgid "IfcIndexedPolygonalFace_ToFaceSet_DEFINITION"
msgstr "ToFaceSet"

#:IFC.xml:10330
msgid "IfcIndexedPolygonalFace_CoordIndex"
msgstr "CoordIndex"

msgid "IfcIndexedPolygonalFace_CoordIndex_DEFINITION"
msgstr "One dimensional list with the indices for the three or more points, that define the vertices of the outer loop. If the tessellated face set is closed, indicated by SELF [[IfcTessellatedFaceSet]].Closed , then the points, defining the outer loop, shall connect counter clockwise, as seen from the outside of the body, so that the resulting normal will point outwards. X 0D NOTE The coordinates of the vertices are provided by the indexed list of SELF [[IfcTessellatedFaceSet]].Coordinates.CoordList . If the SELF [[IfcTessellatedFaceSet]].PnIndex is provided, the indices point into it, otherwise directly into the [[IfcCartesianPointList3D]] ."

#:IFC.xml:10351
msgid "IfcIndexedPolygonalFaceWithVoids"
msgstr "IfcIndexedPolygonalFaceWithVoids"

msgid "IfcIndexedPolygonalFaceWithVoids_DEFINITION"
msgstr "The [[IfcIndexedPolygonalFaceWithVoids]] is a compact representation of a planar face with inner loops, being part of a face set. HISTORY New entity in IFC4 Addendum 2. bSI Documentation"

#:IFC.xml:10352
msgid "IfcIndexedPolygonalFaceWithVoids_InnerCoordIndices"
msgstr "InnerCoordIndices"

msgid "IfcIndexedPolygonalFaceWithVoids_InnerCoordIndices_DEFINITION"
msgstr "Two dimensional list, where the first dimension represents each inner loop from 1 to N and the second dimension the indices to three or more points that define the vertices of each inner loop. If the tessellated face set is closed, indicated by SELF [[IfcTessellatedFaceSet]].Closed , then the points, defining the inner loops, shall connect clockwise, as seen from the outside of the body. X 0D NOTE The coordinates of the vertices are provided by the indexed list of SELF [[IfcTessellatedFaceSet]].Coordinates.CoordList . If the SELF [[IfcTessellatedFaceSet]].PnIndex is provided, the indices point into it, otherwise directly into the [[IfcCartesianPointList3D]] ."

#:IFC.xml:10359
msgid "IfcManifoldSolidBrep"
msgstr "IfcManifoldSolidBrep"

msgid "IfcManifoldSolidBrep_DEFINITION"
msgstr "The [[IfcManifoldSolidBrep]] is a solid represented as a collection of connected surfaces that delimit the solid from the surrounding non solid. Instances of type [[IfcManifoldSolidBrep]] shall be of type [[IfcFacetedBrep]] , using only [[IfcPolyLoop]] for the bounds of [[IfcFaceBound]] , or of type [[IfcAdvancedBrep]] , using only [[IfcAdvancedFace]] for the face geometry, and [[IfcEdgeCurve]] for the edges. .extDef NOTE Definition according to ISO CD 10303 42 1992 A manifold solid b rep is a finite, arcwise connected volume bounded by one or more surfaces, each of which is a connected, oriented, finite, closed 2 manifold. There is no restriction on the genus of the volume, nor on the number of voids within the volume. The Boundary Representation B rep of a manifold solid utilizes a graph of edges and vertices embedded in a connected, oriented, finite, closed two manifold surface. The embedded graph divides the surface into arcwise connected areas known as faces. The edges and vertices, therefore, form the boundaries of the face and the domain of a face does not include its boundaries. The embedded graph may be disconnected and may be a pseudo graph. The graph is labeled that is, each entity in the graph has a unique identity. The geometric surface definition used to specify the geometry of a face shall be 2 manifold embeddable in the plane within the domain of the face. In other words, it shall be connected, oriented, finite, non self intersecting, and of surface genus 0. Faces do not intersect except along their boundaries. Each edge along the boundary of a face is shared by at most one other face in the assemblage. The assemblage of edges in the B rep do not intersect except at their boundaries i.e., vertices . The geometry curve definition used to specify the geometry of an edge shall be arcwise connected and shall not self intersect or overlap within the domain of the edge. The geometry of an edge shall be consistent with the geometry of the faces of which it forms a partial bound. The geometry used to define a vertex shall be consistent with the geometry of the faces and edges of which it forms a partial bound. The geometry used to define a vertex shall be consistent with the geometry of the faces and edges of which it forms a partial bound. A B rep is represented by one or more closed shells which shall be disjoint. One shell, the outer, shall completely enclose all the other shells and no other shell may enclose a shell. The facility to define a B rep with one or more internal voids is provided by a subtype. The following version of the Euler formula shall be satisfied, math .. .. .. .. .. .. figures ifcmanifoldsolidbrep math1.gif where V, E, F, L X 7El X 7E and S are the numbers of unique vertices, edges, faces, loop uses and shells in the model and G s is the sum of the genus of the shells. NOTE Entity adapted from manifold solid brep defined in ISO 10303 42. HISTORY New entity in IFC Release 1.0 Informal proposition 1. The dimensionality of a manifold solid brep shall be 3. 2. The extent of the manifold solid brep shall be finite and non zero. 3. All elements of the manifold solid brep shall have defined associated geometry. 4. The shell normals shall agree with the B rep normal and point away from the solid represented by the B rep. 5. Each face shall be referenced only once by the shells of the manifold solid brep. 6. The Euler equation shall be satisfied for the boundary representation, where the genus term shell term us the sum of the genus values for the shells of the brep. bSI Documentation"

#:IFC.xml:10362
msgid "IfcManifoldSolidBrep_Outer"
msgstr "Outer"

msgid "IfcManifoldSolidBrep_Outer_DEFINITION"
msgstr "Outer"

#:IFC.xml:10374
msgid "IfcPointListDim__PointList"
msgstr "IfcPointListDim PointList"

msgid "IfcPointListDim__PointList_DEFINITION"
msgstr "This function determines the dimensionality of a cartesian point list."

#:IFC.xml:10382
msgid "IfcPolygonalBoundedHalfSpace"
msgstr "IfcPolygonalBoundedHalfSpace"

msgid "IfcPolygonalBoundedHalfSpace_DEFINITION"
msgstr "The polygonal bounded half space is a special subtype of a half space solid, where the material of the half space used in Boolean expressions is bounded by a polygonal boundary. The base surface of the half space is positioned by its normal relative to the object coordinate system as defined at the supertype [[IfcHalfSpaceSolid]] , and its polygonal with or without arc segments boundary is defined in the XY plane of the position coordinate system established by the Position attribute, the subtraction body is extruded perpendicular to the XY plane of the position coordinate system, that is, into the direction of the positive Z axis defined by the Position attribute. The boundary is defined by a 2 dimensional polyline or 2 dimensional composite curve, consisting of straight segments and circular arc segments within the XY plane of the position coordinate system. The side of the surface which is in the half space is determined by the surface normal and the agreement flag. If the agreement flag is TRUE, then the subset is the one the normal points away from. If the agreement flag is FALSE, then the subset is the one the normal points into. NOTE A polygonal bounded half space is not a subtype of [[IfcSolidModel]] , half space solids are only useful as operands in Boolean expressions. Figure 1 illustrates a polygonal bounded half space. Black coordinates indicate the object coordinate system usually provided by [[IfcLocalPlacement]] . Green coordinates indicate the position coordinate system the PolygonalBoundary is given within this coordinate system. It is provided by [[IfcPolygonalBoundedHalfSpace]].Position. This coordinate system is relative to the object coordinate system. The extrusion direction of the subtraction body is the positive Z axis. Red coordinates indicate the normal of the plane. It is provided by the BaseSurface [[IfcSurface]].Position . This normal is also relative to the object coordinate system. Figure 1 Polygonal half space geometry The polygonal bounded half space is used to limit the volume of the half space in Boolean difference expressions. Only the part that is defined by a theoretical intersection between the half space solid and an extruded area solid, defined by extruding the polygonal boundary, is used for Boolean expressions. The PolygonalBoundary defines the 2D polyline which bounds the effectiveness of the half space in Boolean expressions. The BaseSurface is defined by a plane, and the normal of the plane together with the AgreementFlag defines the side of the material of the half space. HISTORY New entity in IFC2x. .spec head Informal Propositions 1. The [[IfcPolyline]] or the [[IfcCompositeCurve]] providing the PolygonalBoundary shall be closed. 2. If the PolygonalBoundary is given by an [[IfcCompositeCurve]] , it shall only have [[IfcCompositeCurveSegment]] s of type [[IfcPolyline]] , or [[IfcTrimmedCurve]] having a BasisCurve of type [[IfcLine]] , or [[IfcCircle]] 3. The BaseSurface defined at supertype [[IfcHalfSpaceSolid]] shall be of type [[IfcPlane]] 4. The normal of the plane, being the BaseSurface , shall not be perpendicular to the z axis of the position coordinate system bSI Documentation"

#:IFC.xml:10393
msgid "IfcPolygonalBoundedHalfSpace_PolygonalBoundary"
msgstr "PolygonalBoundary"

msgid "IfcPolygonalBoundedHalfSpace_PolygonalBoundary_DEFINITION"
msgstr "PolygonalBoundary"

#:IFC.xml:10405
msgid "IfcPolygonalBoundedHalfSpace_Position"
msgstr "Position"

msgid "IfcPolygonalBoundedHalfSpace_Position_DEFINITION"
msgstr "Position"

#:IFC.xml:10417
msgid "IfcPolygonalFaceSet"
msgstr "IfcPolygonalFaceSet"

msgid "IfcPolygonalFaceSet_DEFINITION"
msgstr "The [[IfcPolygonalFaceSet]] is a tessellated face set with all faces being bound by polygons. The planar faces are constructed by implicit polylines defined by three or more Cartesian points. Each planar face is defined by an instance of [[IfcIndexedPolygonalFace]] , or in case of faces with inner loops by [[IfcIndexedPolygonalFaceWithVoids]] . Depending on the value of the attribute Closed the instance of [[IfcPolygonalFaceSet]] represents if TRUE, a boundary represention or B rep if FALSE, a face based surface representation. The attribute Faces refers to a list of [[IfcIndexedPolygonalFace]] s having an one based CoordIndex that provides three or more indices. If the face has inner loops, the [[IfcIndexedPolygonalFaceWithVoids]] has a two dimensional, one based list, where the first dimension of the two dimensional list addresses the list of inner loops the second dimension of the two dimensional list provides three or more indices each being a vertex of the planar polygon representing the inner loop. Depending on the provision of PnIndex the indices point either directly into the [[IfcCartesianPointList3D]] referenced by Coordinates defined at the supertype [[IfcTessellatedFaceSet]] , or they point into the PnIndex where the integer values at that position provides the location of the coordinate values within the [[IfcCartesianPointList3D]] . See Figure 1 for the handling of point index. PnIndex .. .. .. .. .. .. figures ifcpolygonalfaceset 01.png Figure 1 Use of PnIndex NOTE If the [[IfcPolygonalFaceSet]] is closed, the face vertices of the [[IfcIndexedPolygonalFace]] s shall connect counterclock wise when seen from the outside of the closed shell to guarantee that the face normal points away from the material of the shell. Inner loops, provided by the [[IfcIndexedPolygonalFaceWithVoids]] , shall connect clock wise. Figure 2 shows an IfcFacetedFaceSet represented by 1 [[IfcIndexedPolygonalFace]] 1, 2, 3, 4 2 [[IfcIndexedPolygonalFace]] 6, 2, 3, 7 3 [[IfcIndexedPolygonalFace]] 7, 3, 4, 8 4 [[IfcIndexedPolygonalFace]] 8, 4, 1, 5 5 [[IfcIndexedPolygonalFace]] 1, 4, 3, 2 6 [[IfcIndexedPolygonalFace]] 6, 7, 8, 5 7 [[IfcCartesianPointList3D]] 0.,0.,0. , 1.,0.,0. , 1.,1.,0. , 0.,1.,0. , 0.,0.,2. , 1.,0.,2. , 1.,1.,2. , 0.,1.,2. Figure 2 Polygonal face set geometry NOTE The definition of IfcFacetedFaceSet is based on the indexedFaceSet defined in ISO IEC 19775 1 HISTORY New entity in IFC4 Addendum 2. .spec head Informal Propositions 1. If Closed TRUE, the same topological constraints as imposed by an faceted boundary representation shall be safisfied. In particular each face shall be unique each edge shall be used by exactly two outer or inner boundaries of faces the topological normal at each point on the boundary of the polygonal face set shall point away from the material of the solid. bSI Documentation"

#:IFC.xml:10337
msgid "IfcPolygonalFaceSet_Faces"
msgstr "Faces"

msgid "IfcPolygonalFaceSet_Faces_DEFINITION"
msgstr "Faces"

#:IFC.xml:10418
msgid "IfcPolygonalFaceSet_Closed"
msgstr "Closed"

msgid "IfcPolygonalFaceSet_Closed_DEFINITION"
msgstr "Indication whether the [[IfcPolygonalFaceSet]] is a closed shell or not. If omited no such information can be provided."

#:IFC.xml:10423
msgid "IfcPolygonalFaceSet_PnIndex"
msgstr "PnIndex"

msgid "IfcPolygonalFaceSet_PnIndex_DEFINITION"
msgstr "The list of integers defining the locations in the [[IfcCartesianPointList3D]] to obtain the point coordinates for the indices at the indexed polygonal faces. If the PnIndex is not provided the indices at the indexed polygonal faces point directly into the [[IfcCartesianPointList3D]] ."

#:IFC.xml:10430
msgid "IfcRectangularPyramid"
msgstr "IfcRectangularPyramid"

msgid "IfcRectangularPyramid_DEFINITION"
msgstr "The [[IfcRectangularPyramid]] is a Construction Solid Geometry CSG 3D primitive. It is a solid with a rectangular base and a point called apex as the top. The tapers from the base to the top. The axis from the center of the base to the apex is perpendicular to the base. The inherited Position attribute defines the IfcAxisPlacement3D and provides the location and orientation of the pyramid SELF [[IfcCsgPrimitive3D]].Position The location and orientation of the axis system for the primitive. SELF [[IfcCsgPrimitive3D]].Position.Location The center of the circular area being the bottom face of the cone. SELF [[IfcCsgPrimitive3D]].Position.Position 3 The z axis of the inherited placement coordinate system provides the center axis of the [[IfcRightCircularCone]] , and the apex is at the Height value applied to the positive direction of the z axis. The BottomRadius defines the circular base at the xy plane of the placement coordinate system. As shown in Figure 1, the pyramid is positioned within its own placement coordinate system. The origin is the center of the bottom rectangle, that lies in the XY plane. The apex lies on the positive z axis at 0, 0, Height . pyramid .. .. .. .. .. .. figures ifcrectangularpyramid layout1.png Figure 1 Rectangular pyramid geometry HISTORY New entity in IFC2x3 .use head Texture use definition On each triangular side face, textures are aligned facing upright. Textures are stretched or repeated to the extent of the base of each face according to RepeatS. Textures are stretched or repeated towards the top point according to Repeat T, where the top point has coordinates of 0.5,1.0 if RepeatT is False. On the bottom face, textures are aligned facing front to back. Figure 2 illustrates default texture mapping with a clamped texture RepeatS False and RepeatT False . The image on the left shows the texture where the S axis points to the right and the T axis points up. The image on the right shows the texture applied to the geometry where the X axis points back to the right, the Y axis points back to the left, and the Z axis points up. .gridtable Side Normal Origin X Origin Y Origin Z S Axis T Axis Left X 0 YLength 0 Y towards top point Right X Xlength 0 0 Y towards top point Front Y 0 0 0 X towards top point Back Y XLength YLength 0 X towards top point Bottom Z XLength 0 0 X Y Figure 2 Rectangular pyramid textures bSI Documentation"

#:IFC.xml:10431
msgid "IfcRectangularPyramid_XLength"
msgstr "XLength"

msgid "IfcRectangularPyramid_XLength_DEFINITION"
msgstr "The length of the base measured along the placement X axis. It is provided by the inherited axis placement through SELF [[IfcCsgPrimitive3D]].Position.P 1 ."

#:IFC.xml:10436
msgid "IfcRectangularPyramid_YLength"
msgstr "YLength"

msgid "IfcRectangularPyramid_YLength_DEFINITION"
msgstr "The length of the base measured along the placement Y axis. It is provided by the inherited axis placement through SELF [[IfcCsgPrimitive3D]].Position.P 2 ."

#:IFC.xml:10441
msgid "IfcRectangularPyramid_Height"
msgstr "Height"

msgid "IfcRectangularPyramid_Height_DEFINITION"
msgstr "The height of the apex above the plane of the base, measured in the direction of the placement Z axis, the SELF [[IfcCsgPrimitive3D]].Position.P 2 ."

#:IFC.xml:10448
msgid "IfcRevolvedAreaSolid"
msgstr "IfcRevolvedAreaSolid"

msgid "IfcRevolvedAreaSolid_DEFINITION"
msgstr "An [[IfcRevolvedAreaSolid]] is a solid created by revolving a cross section provided by a profile definition about an axis. The resulting solid is positioned by the [[IfcSweptAreaSolid]] . Position relative to the object coordinate system. If provided, it allows to reposition the revolved solid. If not provided, it defaults to the current object coordinate system. The axis and the cross section shall be in the same plane, prior to any repositioning. NOTE Both the axis and the cross section are required to lie in the xy plane of the object position coordinate system. EXAMPLE Figure 1 illustrates geometric parameters of the revolved solid. The revolved area solid defines the revolution of a 2D area given by a profile definition by an axis and angle. The result is a solid. The swept area is given by a profile definition. The profile is defined as a 2D primitive, here [[IfcRectangleProfileDef]], that is placed relative to the xy plane of object coordinate system since no 2D profile position coordinate system is provided, here [[IfcParameterizedProfileDef]].Position NIL, the profile is positioned without transformation into the xy plane of the object coordinate system by default, centric at 0.,0. with no rotation The resulting swept solid is not repositioned, as no position coordinate system is provided, here [[IfcSweptAreaSolid]].Position NIL. The AxisLine can have any orientation within the XY plane, it does not have to be parallel to the y axis as shown in the illustration. Figure 1 Revolved area solid geometry EXAMPLE Figure 1 illustrates geometric parameters and additional positioning parameters of the revolved area solid. The revolved area solid defines the rotation of a 2D area by an axis and angle. The 2D area, provided by a parameterized profile definition, can be positioned relative to the object coordinate system other then by default at 0.,0. with no rotation . The result is a solid that can be repositioned within the object coordinate system. The profile to be swept is defined as a 2D primitive, here [[IfcRectangleProfileDef]], that is placed relative to the xy plane of object coordinate system a 2D profile position coordinate system is provided that positions the profile relative to the xy plane here at a corner of the rectangle The resulting swept solid is repositioned, here it is moved into local z and rotated by 15 along the x axis. Figure 2 Repositioned revolved area solid geometry .extDef NOTE Definition according to ISO CD 10303 42 1992 A revolved area solid is a solid formed by revolving a planar bounded surface about an axis. The axis shall be in the plane of the surface and the axis shall not intersect the interior of the bounded surface. The bounded surface may have holes which will sweep into holes in the solid. The direction of revolution is clockwise when viewed along the axis in the positive direction. More precisely if A is the axis location and d is the axis direction and C is an arc on the surface of revolution generated by an arbitrary point p on the boundary of the swept area, then C leaves p in direction d x p A as the area is revolved. NOTE Entity adapted from revolved area solid defined in ISO 10303 42. HISTORY New entity in IFC1.5 .spec head Informal Propositions 1. The AxisLine shall lie in the plane of the SweptArea as defined at supertype [[IfcSweptAreaSolid]] . 2. The AxisLine shall not intersect the interior of the SweptArea as defined at supertype [[IfcSweptAreaSolid]] . 3. The Angle shall be between 0 and 360 , or 0 and 2π depending on the unit type for [[IfcPlaneAngleMeasure]] . .use head Texture Use Definition For side faces, textures are aligned facing upright along the sides with origin at the first point of an arbitrary profile, and following the outer bound of the profile counter clockwise as seen from above . For parameterized profiles, the origin is defined at the Y extent for rounded profiles having no sharp edge and the first sharp edge counter clockwise from the Y extent for all other profiles. Textures are stretched or repeated on each side along the outer boundary of the profile according to RepeatS . Textures are stretched or repeated on each side along the outermost longest revolution path according to RepeatT , where coordinates are compressed towards the axis of revolution. For top and bottom caps, textures are aligned facing front to back, with the origin at the minimum X and Y extent. Textures are stretched or repeated on the top and bottom to the extent of each face according to RepeatS and RepeatT . For profiles with voids, textures are aligned facing upright along the inner side with origin at the first point of an arbitrary profile, and following the inner bound of the profile clockwise as seen from above . For parameterized profiles, the origin of inner sides is defined at the Y extent for rounded profiles having no sharp edge such as hollow ellipses or rounded rectangles and the first sharp edge clockwise from the Y extent for all other profiles. Figure 3 illustrates default texture mapping with a repeated texture RepeatS True and RepeatT True . The image on the left shows the texture where the S axis points to the right and the T axis points up. The image on the right shows the texture applied to the geometry where the X axis points back to the right, the Y axis points back to the left, and the Z axis points up. For an [[IfcRevolvedAreaSolid]] having a profile of [[IfcTShapeProfileDef]] and revolved at 22.5 degrees, the side texture coordinate origin is the first corner counter clockwise from the Y axis, which equals 0.5 [[IfcTShapeProfileDef]].OverallWidth, 0.5 [[IfcTShapeProfileDef]].OverallDepth , while the top end cap texture coordinates start at 0.5 [[IfcTShapeProfileDef]].OverallWidth, 0.5 [[IfcTShapeProfileDef]].OverallDepth . Figure 3 Revolved area solid textures bSI Documentation"

#:IFC.xml:10468
msgid "IfcRevolvedAreaSolid_Axis"
msgstr "Axis"

msgid "IfcRevolvedAreaSolid_Axis_DEFINITION"
msgstr "Axis"

#:IFC.xml:10457
msgid "IfcRevolvedAreaSolid_Angle"
msgstr "Angle"

msgid "IfcRevolvedAreaSolid_Angle_DEFINITION"
msgstr "The angle through which the sweep will be made. This angle is measured from the plane of the swept area provided by the XY plane of the position coordinate system."

#:IFC.xml:10462
msgid "IfcRevolvedAreaSolid_AxisLine"
msgstr "AxisLine"

msgid "IfcRevolvedAreaSolid_AxisLine_DEFINITION"
msgstr "The line of the axis of revolution."

#:IFC.xml:10480
msgid "IfcRevolvedAreaSolidTapered"
msgstr "IfcRevolvedAreaSolidTapered"

msgid "IfcRevolvedAreaSolidTapered_DEFINITION"
msgstr "[[IfcRevolvedAreaSolidTapered]] is defined by revolving a cross section along a circular arc. The cross section may change along the revolving sweep from the shape of the start cross section into the shape of the end cross section. Corresponding vertices of the start and end cross sections are then connected. The bounded surface may have holes which will sweep into holes in the solid. The rotation axis is defined by Start point SELF [[IfcSweptAreaSolid]].Position.Location Direction SELF [[IfcRevolvedAreaSolid]].Axis Rotation axis SELF [[IfcRevolvedAreaSolid]].AxisLine , created from start point and direction by appying a 1 unit magnitude. Orientation Positive angles are applied clockwise when looking into the positive direction of the rotation axis. The start cross section is defined by SELF [[IfcSweptAreaSolid]].SweptArea A bounded planar surface lying in the XY plane of the position coordinate system defined by SELF [[IfcSweptAreaSolid]].Position.P 1 and SELF [[IfcSweptAreaSolid]].Position.P 2 The rotation axis lies in the plane of the start cross section but shall not intersect the interior of the start cross section. The end cross section is defined by EndSweptArea A bounded planar surface lying in the XY plane of the position coordinate system defined by rotating the start position coordinates provided by SELF [[IfcSweptAreaSolid]].Position around the rotation axis by the angle given by SELF [[IfcRevolvedAreaSolid]].Angle . The end cross section is topologically similar to the start cross section having the same number of vertices and edges . The end cross section can either be defined by the same paramteric profile using different parameter values, or by a 2D Cartesian transformation of the start profile within the end cross section plane. The solid is generated by transforming the start cross section into to end cross section. A start face, an end face each defined by start and end cross sections , and one or more lateral faces. Each lateral face is a ruled surface defined by a pair of corresponding edges of the start and end section. The ruled surfaces are constructed in the cylindrical coordinate space defined by the supertype [[IfcRevolvedAreaSolid]] . HISTORY New entity in IFC4. .spec head Informal Propositions 1. Mirroring within [[IfcDerivedProfileDef]].Operator shall not be used bSI Documentation"

#:IFC.xml:10487
msgid "IfcRevolvedAreaSolidTapered_EndSweptArea"
msgstr "EndSweptArea"

msgid "IfcRevolvedAreaSolidTapered_EndSweptArea_DEFINITION"
msgstr "EndSweptArea"

#:IFC.xml:10499
msgid "IfcRightCircularCone"
msgstr "IfcRightCircularCone"

msgid "IfcRightCircularCone_DEFINITION"
msgstr "The [[IfcRightCircularCone]] is a Construction Solid Geometry CSG 3D primitive. It is a solid with a circular base and a point called apex as the top. The tapers from the base to the top. The axis from the center of the circular base to the apex is perpendicular to the base. The inherited Position attribute defines the IfcAxisPlacement3D and provides the location and orientation of the cone SELF [[IfcCsgPrimitive3D]].Position The location and orientation of the axis system for the primitive. SELF [[IfcCsgPrimitive3D]].Position.Location The center of the circular area being the bottom face of the cone. SELF [[IfcCsgPrimitive3D]].Position.Position 3 The z axis of the inherited placement coordinate system provides the center axis of the [[IfcRightCircularCone]] , and the apex is at the Height value applied to the positive direction of the z axis. The BottomRadius defines the circular base at the xy plane of the placement coordinate system. Figure 1 illustrates geometric parameters of the cone. The cone is positioned within its own placement coordinate system. The origin is the center of the bottom circular disk, that lies in the XY plane. The apex lies on the positive z axis at 0, 0, Height . cone1 .. .. .. .. .. .. figures ifcrightcircularcone layout1.png Figure 1 Right circular cone geometry NOTE Entity adapted from right circular cone defined in ISO 10303 42. HISTORY New entity in IFC2x3 .use head Texture use definition On the circular side, textures are aligned facing upright with origin at the back Y direction revolving counter clockwise. Textures are stretched or repeated to the extent of the base circumference according to RepeatS. Textures are compressed linearly going upwards towards the top point according to RepeatT. On the bottom face, textures are aligned facing front to back, with the center of the circle aligned to the center of the texture. Figure 2 illustrates default texture mapping with a clamped texture RepeatS False and RepeatT False . The image on the left shows the texture where the S axis points to the right and the T axis points up. The image on the right shows the texture applied to the geometry where the X axis points back to the right, the Y axis points back to the left, and the Z axis points up. .gridtable Side Normal Origin X Origin Y Origin Z S Axis T Axis Side Y 0 Radius 0 X towards top point Bottom Z Radius Radius 0 X Y Figure 2 Right circular cone textures bSI Documentation"

#:IFC.xml:10500
msgid "IfcRightCircularCone_Height"
msgstr "Height"

msgid "IfcRightCircularCone_Height_DEFINITION"
msgstr "The distance between the base of the cone and the apex."

#:IFC.xml:10505
msgid "IfcRightCircularCone_BottomRadius"
msgstr "BottomRadius"

msgid "IfcRightCircularCone_BottomRadius_DEFINITION"
msgstr "The radius of the cone at the base."

#:IFC.xml:10512
msgid "IfcRightCircularCylinder"
msgstr "IfcRightCircularCylinder"

msgid "IfcRightCircularCylinder_DEFINITION"
msgstr "The [[IfcRightCircularCylinder]] is a Construction Solid Geometry CSG 3D primitive. It is a solid with a circular base and top. The cylindrical surface between if formed by points at a fixed distance from the axis of the cylinder. The inherited Position attribute defines the IfcAxisPlacement3D and provides SELF [[IfcCsgPrimitive3D]].Position The location and orientation of the axis system for the primitive. SELF [[IfcCsgPrimitive3D]].Position.Location The center of the circular area being the bottom face of the cylinder. SELF [[IfcCsgPrimitive3D]].Position.Position 3 The z axis provides the center axis and the height is measured from the origin along the positive direction of the z axis. Figure 1 illustrates geometric parameters of the cylinder. The cylinder is positioned within its own placement coordiante system. The origin is the center of the bottom circular disk, that lies in the XY plane. The center of the top circular disk is on the positive z axis at 0, 0, Height . cylinder .. .. .. .. .. .. figures ifcrightcircularcylinder layout1.png Figure 1 Right circular cylinder geometry .extDef NOTE Definition according to ISO CD 10303 42 1992 A right circular cylinder is a CSG primitive in the form of a solid cylinder of finite height. It is defined by an axis point at the centre of one planar circular face, an axis, a height, and a radius. The faces are perpendicular to the axis and are circular discs with the specified radius. The height is the distance from the first circular face centre in the positive direction of the axis to the second circular face centre. NOTE Entity adapted from right circular cylinder defined in ISO 10303 42. HISTORY New entity in IFC2x3. .use head Texture use definition On the circular side, textures are aligned facing upright with origin at the back Y direction revolving counter clockwise. Textures are stretched or repeated to the extent of the circumference according to RepeatS. Textures are stretched or repeated to the extent of the Height according to RepeatT. On the top and bottom faces, textures are aligned facing front to back, with the center of the circle aligned to the center of the texture. Figure 2 illustrates default texture mapping with a clamped texture RepeatS False and RepeatT False . The image on the left shows the texture where the S axis points to the right and the T axis points up. The image on the right shows the texture applied to the geometry where the X axis points back to the right, the Y axis points back to the left, and the Z axis points up. .gridtable Side Normal Origin X Origin Y Origin Z S Axis T Axis Side Y 0 Radius 0 X Z Bottom Z Radius Radius 0 X Y Top Z Radius Radius Height X Y Figure 2 Right circular cylinder textures bSI Documentation"

#:IFC.xml:10513
msgid "IfcRightCircularCylinder_Height"
msgstr "Height"

msgid "IfcRightCircularCylinder_Height_DEFINITION"
msgstr "The distance between the planar circular faces of the cylinder."

#:IFC.xml:10518
msgid "IfcRightCircularCylinder_Radius"
msgstr "Radius"

msgid "IfcRightCircularCylinder_Radius_DEFINITION"
msgstr "The radius of the cylinder."

#:IFC.xml:10525
msgid "IfcSectionedSolid"
msgstr "IfcSectionedSolid"

msgid "IfcSectionedSolid_DEFINITION"
msgstr "An [[IfcSectionedSolid]] is an abstract base type for solids constructed by sweeping potentially variable cross sections along a directrix. bSI Documentation"

#:IFC.xml:10540
msgid "IfcSectionedSolid_Directrix"
msgstr "Directrix"

msgid "IfcSectionedSolid_Directrix_DEFINITION"
msgstr "Directrix"

#:IFC.xml:10552
msgid "IfcSectionedSolid_CrossSections"
msgstr "CrossSections"

msgid "IfcSectionedSolid_CrossSections_DEFINITION"
msgstr "CrossSections"

#:IFC.xml:10564
msgid "IfcSectionedSolidHorizontal"
msgstr "IfcSectionedSolidHorizontal"

msgid "IfcSectionedSolidHorizontal_DEFINITION"
msgstr "An [[IfcSectionedSolidHorizontal]] is a solid model constructed by sweeping potentially varying cross sections along a curve horizontally. The solid is generated by sweeping the CrossSections between CrossSectionPositions with linear interpolation of profile points, where the profile normal agrees with the tangent of the Directrix , the profile X axis is oriented perpendicularly to the left of the Directrix same direction as LateralOffset at IfcDistanceExpression as facing forward along the directrix, and the profile Y axis is oriented upwards according to FixedAxisVertical . For sections having cross section rotated according to a single super elevation, [[IfcDerivedProfileDef]] may be used to indicate such rotation with each ParentProfile referring to the same underlying profile. For sections having cross section transformed according to multiple super elevations with points varying independently, each profile may be of a different instance but of same type e.g. [[IfcArbitraryClosedProfileDef]] , and may optionally have cross section points associated to string lines X2 201C X0 guide curves X2 201D X0 using [[IfcIndexedPolyCurve]] with IfcCartesianPointList2DLabelled . Figure 1 illustrates four girders of a bridge having a constant parameterized profile, two guardrails having a constant arbitrary profile one of them mirrored , and a bridge deck having a variable arbitrary profile. spatial structure .. .. .. .. .. .. figures ifcsectionedsolidhorizontal.png Figure 1 Sectioned solid horizontal Informal Propositions 1. No two consecutive sections shall intersect. 2. If the type of sections is not [[IfcParameterizedProfileDef]] i.e. an arbitrary profile , then the number of points and edges should be the same for two consecutive profiles 3. If the directrix is not tangent continuous, the resulting solid is created by a miter at half angle between the two segments. 4. Very sharp edges may result in nearly impossible miter implementer agreements may define acceptable limits for tangent discontinuity or require the directrix to be tangent continuous. 5. The directrix shall not intersect bSI Documentation"

#:IFC.xml:10580
msgid "IfcSectionedSolidHorizontal_CrossSectionPositions"
msgstr "CrossSectionPositions"

msgid "IfcSectionedSolidHorizontal_CrossSectionPositions_DEFINITION"
msgstr "CrossSectionPositions"

#:IFC.xml:10573
msgid "IfcSectionedSolidHorizontal_FixedAxisVertical"
msgstr "FixedAxisVertical"

msgid "IfcSectionedSolidHorizontal_FixedAxisVertical_DEFINITION"
msgstr "Indicates whether Sections are oriented with the Y axis of each profile facing upwards in Z direction True , or vertically perpendicular to the Directrix varying according to slope False ."

#:IFC.xml:10592
msgid "IfcSectionedSpine"
msgstr "IfcSectionedSpine"

msgid "IfcSectionedSpine_DEFINITION"
msgstr "An [[IfcSectionedSpine]] is a representation of the shape of a three dimensional object composed by a number of planar cross sections, and a spine curve. The shape is defined between the first element of cross sections and the last element of the cross sections. A sectioned spine may be used to represent a surface or a solid but the interpolation of the shape between the cross sections is not defined. All cross sections have to define areas by a closed profile to allow for the representation of a solid. All cross sections have to define curves by an open or closed profile to allow for the representation of a surface. The cross sections are defined by subtypes of [[IfcProfileDef]] , where the consecutive profiles may be derived by a transformation of the start profile or the previous consecutive profile. The spine curve shall be of type [[IfcCompositeCurve]] , each of its segments represented by [[IfcCompositeCurveSegment]] shall correspond to the part between exactly two consecutive cross sections. Figure 1 illustrates an example of an [[IfcSectionedSpine]] . The SpineCurve is given by an [[IfcCompositeCurve]] with two Segments . The Segments 1 has a ParentCurve of type [[IfcPolyline]] and a Transition CONTSAMEGRADIENT. The Segments 2 has a ParentCurve of type [[IfcTrimmedCurve]] and a Transition DISCONTINUOUS. Each CrossSectionPosition lies at a start or end point of the Segments . Each CrossSections are inserted by the CrossSectionPositions . The first two cross sections are of type [[IfcRectangleProfileDef]] , the third is of type [[IfcDerivedProfileDef]] . spine 1 .. .. .. .. .. .. figures ifcsectionedspine layout1.gif Figure 1 Sectioned spine geometry Figure 2 illustrates the final result of the [[IfcSectionedSpine]] . The body shown transparently is not fully defined by the exchange definition. render .. .. .. .. .. .. figures ifcsectionedspine.jpg Figure 2 Sectioned spine result .extDef NOTE Definition according to ISO CD 10303 42 1992 A sectioned spine is a representation of the shape of a three dimensional object composed of a spine curve and a number of planar cross sections. The shape is defined between the first element of cross sections and the last element of this set. NOTE A sectioned spine may be used to represent a surface or a solid but the interpolation of the shape between the cross sections is not defined. For the representation of a solid all cross sections are closed curves. NOTE Entity adapted from sectioned spine defined in ISO 10303 42. HISTORY New entity in IFC2x. .spec head Informal Propositions 1. none of the cross sections, after being placed by the cross section positions, shall intersect 2. none of the cross sections, after being placed by the cross section positions, shall lie in the same plane 3. the local origin of each cross section position shall lie at the beginning or end of a composite curve segment. bSI Documentation"

#:IFC.xml:10612
msgid "IfcSectionedSpine_CrossSectionPositions"
msgstr "CrossSectionPositions"

msgid "IfcSectionedSpine_CrossSectionPositions_DEFINITION"
msgstr "CrossSectionPositions"

#:IFC.xml:10624
msgid "IfcSectionedSpine_SpineCurve"
msgstr "SpineCurve"

msgid "IfcSectionedSpine_SpineCurve_DEFINITION"
msgstr "SpineCurve"

#:IFC.xml:10636
msgid "IfcSectionedSpine_CrossSections"
msgstr "CrossSections"

msgid "IfcSectionedSpine_CrossSections_DEFINITION"
msgstr "CrossSections"

#:IFC.xml:10605
msgid "IfcSectionedSpine_Dim"
msgstr "Dim"

msgid "IfcSectionedSpine_Dim_DEFINITION"
msgstr "The dimensionality of the spine curve is always 3."

#:IFC.xml:10648
msgid "IfcSectionedSurface"
msgstr "IfcSectionedSurface"

msgid "IfcSectionedSurface_DEFINITION"
msgstr "A kind of surface constructed by sweeping potentially varying open cross sections along a curve horizontally or near horizontally . The surface is generated by sweeping the CrossSections between CrossSectionPositions linear interpolation is assumed, unless transitions curves between cross section points are indicated by OpenCrossProfileDef.Tags. The CrossSections are oriented with the Y axis of each profile facing upwards in Z direction or vertically perpendicular to the Directrix, depending on the Attribute FixedAxisVertical value. [[IfcSectionedSurface]] 1 Figure 1 SectionSurface using OpenCrossProfileDef In case of branching longitudinal breaklines, the SectionedSurface may use OpenCrossProfileDef instances with varying number of cross section points. In that case, the point in two consecutive cross sections that are connected are identified by the same tag value. [[IfcSectionedSurface]] 2 Figure 1 SectionedSurface with branching longitudinal breaklines Formal propositions The curve entity which is the underlying directrix shall have the dimensionality of 3. The profile type shall be CURVE within the list of the profiles defining the cross sections. The entity type for each section must be the same. The list of cross sections and the list of cross section positions shall be of the same size. Informal Propositions No two consecutive sections shall intersect. If the directrix is not tangent continuous, the resulting surface is created by a miter at half angle between the two segments. Very sharp edges may result in nearly impossible miter implementer agreements may define acceptable limits for tangent discontinuity or require the directrix to be tangent continuous. The directrix shall not intersect"

#:IFC.xml:10649
msgid "IfcSectionedSurface_Directrix"
msgstr "Directrix"

msgid "IfcSectionedSurface_Directrix_DEFINITION"
msgstr "The curve used to define the sweeping operation"

#:IFC.xml:10654
msgid "IfcSectionedSurface_CrossSectionPositions"
msgstr "CrossSectionPositions"

msgid "IfcSectionedSurface_CrossSectionPositions_DEFINITION"
msgstr "List of distance expressions in sequentially increasing order paired with CrossSections, indicating the position of the corresponding section along the Directrix."

#:IFC.xml:10659
msgid "IfcSectionedSurface_CrossSections"
msgstr "CrossSections"

msgid "IfcSectionedSurface_CrossSections_DEFINITION"
msgstr "List of cross sections in sequential order along the Directrix"

#:IFC.xml:10664
msgid "IfcSectionedSurface_FixedAxisVertical"
msgstr "FixedAxisVertical"

msgid "IfcSectionedSurface_FixedAxisVertical_DEFINITION"
msgstr "Indicates whether Sections are oriented with the Y axis of each profile facing upwards in Z direction True , or vertically perpendicular to the Directrix varying according to slope False"

#:IFC.xml:10671
msgid "IfcShellBasedSurfaceModel"
msgstr "IfcShellBasedSurfaceModel"

msgid "IfcShellBasedSurfaceModel_DEFINITION"
msgstr "An [[IfcShellBasedSurfaceModel]] represents the shape by a set of open or closed shells. The connected faces within the shell have a dimensionality 2 and are placed in a coordinate space of dimensionality 3. .extDef NOTE Definition according to ISO CD 10303 42 1992 A shell based surface model is described by a set of open or closed shells of dimensionality 2. The shells shall not intersect except at edges and vertices. In particular, distinct faces may not intersect. A complete face of one shell may be shared with another shell. Coincident portions of shells shall both reference the same faces, edges and vertices defining the coincident region. There shall be at least one shell. A shell may exist independently of a surface model. NOTE Entity adapted from shell based surface model defined in ISO 10303 42. HISTORY New entity in IFC2x. .spec head Informal Propositions 1. The dimensionality of the shell based surface model is 2. 2. The shells shall not overlap or intersect except at common faces, edges or vertices. bSI Documentation"

#:IFC.xml:10672
msgid "IfcShellBasedSurfaceModel_SbsmBoundary"
msgstr "SbsmBoundary"

msgid "IfcShellBasedSurfaceModel_SbsmBoundary_DEFINITION"
msgstr ""

#:IFC.xml:10677
msgid "IfcShellBasedSurfaceModel_Dim"
msgstr "Dim"

msgid "IfcShellBasedSurfaceModel_Dim_DEFINITION"
msgstr "The space dimensionality of this class, it is always 3."

#:IFC.xml:10684
msgid "IfcSolidModel"
msgstr "IfcSolidModel"

msgid "IfcSolidModel_DEFINITION"
msgstr "An [[IfcSolidModel]] represents the 3D shape by different types of solid model representations. It is the common abstract supertype of Boundary representation, CSG representation, Sweeping representation and other suitable solid representation schemes. .extDef NOTE Definition according to ISO CD 10303 42 1992 A solid model is a complete representation of the nominal shape of a product such that all points in the interior are connected. Any point can be classified as being inside, outside, or on the boundary of a solid. There are several different types of solid model representations. NOTE Entity adapted from solid model defined in ISO 10303 42. HISTORY New entity in IFC1.5 bSI Documentation"

#:IFC.xml:10685
msgid "IfcSolidModel_Dim"
msgstr "Dim"

msgid "IfcSolidModel_Dim_DEFINITION"
msgstr "The space dimensionality of this class, it is always 3."

#:IFC.xml:10694
msgid "IfcSphere"
msgstr "IfcSphere"

msgid "IfcSphere_DEFINITION"
msgstr "The [[IfcSphere]] is a Construction Solid Geometry CSG 3D primitive. It is a solid where all points at the surface have the same distance from the center point. The inherited Position attribute defines the IfcAxisPlacement3D and provides SELF [[IfcCsgPrimitive3D]].Position The location and orientation of the axis system for the primitive. SELF [[IfcCsgPrimitive3D]].Position.Location The center of the sphere. SELF [[IfcCsgPrimitive3D]].Position.Position 3 The z axis points at its positve direction towards the north pole, and by its negative directions towards the south pole. EXAMPLE Figure 1 illustrates geometric parameters of the sphere. The sphere is positioned within its own placement coordiante system relative to the object coordinate system. The origin is the center of the sphere. Figure 1 Sphere geometry .extDef NOTE Definition according to ISO CD 10303 42 1992 A sphere is a CSG primitive with a spherical shape defined by a centre and a radius. NOTE Entity adapted from sphere defined in ISO 10303 42. HISTORY New entity in IFC2x3. .use head Texture Use Definition Textures are aligned facing upright with origin at the back Y direction revolving counter clockwise. Textures are stretched or repeated to the extent of the circumference at the equator according to RepeatS and RepeatT. Figure 2 illustrates default texture mapping with a clamped texture RepeatS False and RepeatT False . The image on the left shows the texture where the S axis points to the right and the T axis points up. The image on the right shows the texture applied to the geometry where the X axis points back to the right, the Y axis points back to the left, and the Z axis points up. .gridtable Side Normal Origin X Origin Y Origin Z S Axis T Axis Side Y 0 Radius 0 X, then curving counter clockwise Z, then curving towards top Figure 2 Sphere textures bSI Documentation"

#:IFC.xml:10695
msgid "IfcSphere_Radius"
msgstr "Radius"

msgid "IfcSphere_Radius_DEFINITION"
msgstr "The radius of the sphere."

#:IFC.xml:10702
msgid "IfcSurfaceCurveSweptAreaSolid"
msgstr "IfcSurfaceCurveSweptAreaSolid"

msgid "IfcSurfaceCurveSweptAreaSolid_DEFINITION"
msgstr "The [[IfcSurfaceCurveSweptAreaSolid]] is the result of sweeping an area along a directrix that lies on a reference surface. The swept area is provided by a subtype of [[IfcProfileDef]] . The profile is placed by an implicit cartesian transformation operator at the start point of the sweep, where the profile normal agrees to the tangent of the directrix at this point, and the profile s x axis agrees to the surface normal. At any point along the directrix, the swept profile origin lies on the directrix, the profile s normal points towards the tangent of the directrix, and the profile s x axis is identical to the surface normal at this point. NOTE The profile area s normal has to be identical to the tangent of the directrix at any given point. In case of a directrix having a linear segment at the start point, the segment has to be perpendicular to the profile at start. The Directrix and the ReferenceSurface are positioned within the object coordinate system. The start of the sweeping operation is at the StartParam , the parameter value is provided based on the curve parameterization. If no StartParam is provided the start defaults to the begin of the directrix. The end of the sweeping operation is at the EndParam , the parameter value is provided based on the curve parameterization. If no EndParam is provided the end defaults to the end of the directrix. The geometric shape of the solid is not dependent upon the curve parameterization the volume depends upon the area swept and the length of the Directrix . NOTE The StartParam and the EndParam are not normalized by default, they depend upon the parameterization of the curve. However using the [[IfcReparametrisedCompositeCurveSegment]] within an [[IfcCompositeCurve]] as the directrix allows to explicitly reparameterize the underlying sweeping curve. In case of a closed curve, such as [[IfcCircle]] or [[IfcEllipse]] , as the directrix, StartParam and the EndParam shall not exceed the parametic range, they shall not be 360 . EXAMPLE The reference surface is any surface plane, cylindric, composite situated in 3D space and positioned in the object coordinate system. In most cases, it is a plane or a surface of extrusion. The directrix lies on the surface, in case of a plane it might be defined as a polyline or composite curve, in case of a cylindrical or other non planer reference surface it might often be defined as a p curve on this reference surface. At any point of the directrix, a plane can be constructed. The origin of the position coordinate system of the implicit plane lies at the directrix. The Axis3 the z axis, or normal of the position coordinate system is identical to the tangent of the directrix at this point, the Axis1 the x axis, or u of the position coordinate system is identical to the normal of the reference surface at this point. The Axis2 the y axis, or v is constructed. The resulting body of the swept solid is not repositioned if the inherited Position attribute is omitted. Otherwise the coordinate system established by the Position attribute is used to reposition the body relative to the object coordinate system. EXAMPLE Figure 1 illustrates an example using a cylindrical reference surface and a p curve for sweeping a rectangle. The Postion is not provided and therefore it does not reposition the resulting swept solid. Figure 2 shows the expected result. NOTE The start of the directrix lies at the origin of the object coordinate system, as shown in the illustration, only by coincidence. The start of the directrix and thereby the start of the sweeping operation might be at any point within the object coordinate system and only depends on the position of the directrix. Figure 1 Surface curve wept area solid parameter Figure 2 Surface curve wept area solid results .extDef NOTE Definition according to ISO CD 10303 42 1992 A surface curve swept area solid is a type of swept area solid which is the result of sweeping a face along a Directrix lying on a ReferenceSurface . The orientation of the SweptArea is related to the direction of the surface normal. The SweptArea is required to be a curve bounded surface lying in the plane z 0 and this is swept along the Directrix in such a way that the origin of the local coordinate system used to define the SweptArea is on the Directrix and the local x axis is in the direction of the normal to the ReferenceSurface at the current point. The resulting solid has the property that the cross section of the surface by the normal plane to the Directrix at any point is a copy of the SweptArea . The orientation of the SweptArea as it sweeps along the Directrix is precisely defined by a Cartesian Transformation Operator 3D with attributes Local origin as point 0., 0., 0 , Axis 1 as the normal N to the reference surface at the point of the directrix with parameter u. Axis 3 as the direction of the tangent vector t at the point of the directrix with parameter u. The remaining attributes are defaulted to define a corresponding transformation matrix T u , which varies with the directrix parameter u. NOTE Entity adapted from surface curve swept area solid defined in ISO 10303 42. HISTORY New entity in IFC2x2. .spec head Informal Propositions 1. The SweptArea shall lie in the implicit plane z 0. 2. The Directrix shall lie on the ReferenceSurface . bSI Documentation"

#:IFC.xml:10705
msgid "IfcSurfaceCurveSweptAreaSolid_ReferenceSurface"
msgstr "ReferenceSurface"

msgid "IfcSurfaceCurveSweptAreaSolid_ReferenceSurface_DEFINITION"
msgstr "ReferenceSurface"

#:IFC.xml:10717
msgid "IfcSweptAreaSolid"
msgstr "IfcSweptAreaSolid"

msgid "IfcSweptAreaSolid_DEFINITION"
msgstr "An [[IfcSweptAreaSolid]] represents the 3D shape by a sweeping representation scheme allowing a two dimensional planar cross section to sweep through space. The swept area is defined by a cross section, represented by a subtype if [[IfcProfileDef]] , that is provided as a closed two dimensional boundary on an implicit plane. The swept area is defined in the xy plane of the object coordinate system. The sweeping operation is applied to the swept area as defined within the subtypes of [[IfcSweptAreaSolid]] , some subtypes require an implicit transformation of the swept area to the start position of the sweep. The optional Positio n coordinate system allows for re positioning the resulting swept solid relative to the object coordinate system. .extDef NOTE Definition according to ISO CD 10303 42 1992 The swept area solid entity collects the entities which are defined procedurally by sweeping action on planar bounded surfaces. The position is space of the swept solid will be dependent upon the position of the swept area. The swept area will be a face of the resulting swept area solid, except for the case of a revolved area solid with angle equal to 2π or 360 degrees . NOTE Entity adapted from swept area solid defined in ISO 10303 42. HISTORY New entity in IFC1.5 .change ifc2x4 IFC4 CHANGE The attribute Position has been changed to OPTIONAL with upward compatibility for file based exchange. bSI Documentation"

#:IFC.xml:10724
msgid "IfcSweptAreaSolid_SweptArea"
msgstr "SweptArea"

msgid "IfcSweptAreaSolid_SweptArea_DEFINITION"
msgstr "SweptArea"

#:IFC.xml:10736
msgid "IfcSweptAreaSolid_Position"
msgstr "Position"

msgid "IfcSweptAreaSolid_Position_DEFINITION"
msgstr "Position"

#:IFC.xml:10748
msgid "IfcSweptDiskSolid"
msgstr "IfcSweptDiskSolid"

msgid "IfcSweptDiskSolid_DEFINITION"
msgstr "An [[IfcSweptDiskSolid]] represents the 3D shape by a sweeping representation scheme allowing a two dimensional circularly bounded plane to sweep along a three dimensional Directrix through space. The StartParam and EndParam parameter are optional, if not provided they default to the start and end of the Directrix . Only if the Directrix is given by a bounded or by a closed curve, it is permissible to omit the values of StartParam and EndParam . If the transitions between consecutive segments of the Directrix are not tangent continuous, the resulting solid is created by a miter at half angle between the two segments. Informal proposition restricts the permissible angle between two non tangent continuous segments. Figure 1 illustrates an example. Directrix given as [[IfcIndexedPolyCurve]] , having linear and circular arc segments, that are tangent continuous between each segments Directrix being a bounded and open curve No StartParam and EndParam are provided, start and end default to start and end of the bounded curve of the Directrix NOTE Although the example shows a Directrix as a poly curve on a planar reference surface, the definition of [[IfcSweptDiskSolid]] is not restricted to be based on planer curves. However view definitions or implementer agreements may provide restrictions. NOTE The geometric item [[IfcIndexedPolyCurve]] provides a more compact representation compared with [[IfcCompositeCurve]] as is therefore the prefered curve representation for the Directrix . disk solid .. .. .. .. .. .. figures ifcsweptdisksolid layout1.png Figure 1 Swept disk solid geometry .extDef NOTE Definition according to ISO CD 10303 42 1992 A swept disk solid is the solid produced by sweeping a circular disk along a three dimensional curve. During the sweeping operation the normal to the plane of the circular disk is in the direction of the tangent to the directrix curve and the center of the disk lies on the directrix. The circular disk may, optionally, have a central hole, in this case the resulting solid has a through hole, or, an internal void when the directrix forms a close curve. NOTE Entity adapted from swept disk solid defined in ISO 10303 42. HISTORY New entity in IFC2x2. .change ifc2x4 IFC4 CHANGE The attribute StartParam and EndParam have been made optional. .spec head Informal Propositions 1. If the Directrix curve definition is not tangent continuous, the transition between the segments has to be within an acceptable limit of tangent discontinuity. Very sharp edges may result in nearly impossible miter. Implementer agreements may define acceptable limits for tangent discontinuity. 2. The segments of the Directrix shall be long enough to apply the Radius . In case of an arc segment forming part of the Directrix , its radius shall be greater then the disk Radius 3. The Directrix shall not be based on an intersecting curve. bSI Documentation"

#:IFC.xml:10783
msgid "IfcSweptDiskSolid_Directrix"
msgstr "Directrix"

msgid "IfcSweptDiskSolid_Directrix_DEFINITION"
msgstr "Directrix"

#:IFC.xml:10761
msgid "IfcSweptDiskSolid_Radius"
msgstr "Radius"

msgid "IfcSweptDiskSolid_Radius_DEFINITION"
msgstr "The Radius of the circular disk to be swept along the directrix . Denotes the outer radius, if an InnerRadius is applied."

#:IFC.xml:10766
msgid "IfcSweptDiskSolid_InnerRadius"
msgstr "InnerRadius"

msgid "IfcSweptDiskSolid_InnerRadius_DEFINITION"
msgstr "This attribute is optional, if present it defines the radius of a circular hole in the centre of the disk."

#:IFC.xml:10771
msgid "IfcSweptDiskSolid_StartParam"
msgstr "StartParam"

msgid "IfcSweptDiskSolid_StartParam_DEFINITION"
msgstr "The parameter value on the Directrix at which the sweeping operation commences. If no value is provided the start of the sweeping operation is at the start of the Directrix.. X 0D X 0D .change ifc2x4 X 0D IFC4 CHANGE The attribute has been changed to OPTIONAL with upward compatibility for file based exchange."

#:IFC.xml:10776
msgid "IfcSweptDiskSolid_EndParam"
msgstr "EndParam"

msgid "IfcSweptDiskSolid_EndParam_DEFINITION"
msgstr "The parameter value on the Directrix at which the sweeping operation ends. If no value is provided the end of the sweeping operation is at the end of the Directrix.. X 0D X 0D .change ifc2x4 X 0D IFC4 CHANGE The attribute has been changed to OPTIONAL with upward compatibility for file based exchange."

#:IFC.xml:10795
msgid "IfcSweptDiskSolidPolygonal"
msgstr "IfcSweptDiskSolidPolygonal"

msgid "IfcSweptDiskSolidPolygonal_DEFINITION"
msgstr "The [[IfcSweptDiskSolidPolygonal]] is a [[IfcSweptDiskSolid]] where the Directrix is restricted to be provided by an poly line only. An optional FilletRadius attribute can be asserted, it is then applied as a fillet to all transitions between the segments of the poly line. NOTE The geometric item [[IfcIndexedPolyCurve]] provides a more compact representation compared with [[IfcPolyline]] . Therefore it is the prefered curve representation for the Directrix . The [[IfcIndexedPolyCurve]] shall not have Segments defined, resticting it to a poly line only. HISTORY New entity in IFC4. .spec head Informal Propositions 1. The FilletRadius , if provided, has to be smaller then or equal to the length of the start and end segment of the [[IfcPolyline]] , and smaller then or equal to one half of the lenght of the shortest inner segment. bSI Documentation"

#:IFC.xml:10804
msgid "IfcSweptDiskSolidPolygonal_FilletRadius"
msgstr "FilletRadius"

msgid "IfcSweptDiskSolidPolygonal_FilletRadius_DEFINITION"
msgstr "The fillet that is equally applied to all transitions between the segments of the [[IfcPolyline]] , providing the geometric representation for the Directrix . If omited, no fillet is applied to the segments."

#:IFC.xml:10811
msgid "IfcTaperedSweptAreaProfiles__StartArea"
msgstr "IfcTaperedSweptAreaProfiles StartArea"

msgid "IfcTaperedSweptAreaProfiles__StartArea_DEFINITION"
msgstr "This function checks whether the start and end profile in a tapered extrusion are topologically similar, i.e. whether both have the same number of vertices and edges. It returnes TRUE if The start profile is defined by a paramterized profile definition and the end profile is either a derived profile, using the start profile as its parent profile, or the end profile is besed on the same subtype of the paramterized profile definition as the start profile The start profile is defined by an arbitrary bounded curve bounding a plane and the end profile is a derived profile using the start profile as its parent profile HISTORY S New function in IFC2x Edition 4."

#:IFC.xml:10819
msgid "IfcTessellatedFaceSet"
msgstr "IfcTessellatedFaceSet"

msgid "IfcTessellatedFaceSet_DEFINITION"
msgstr "The [[IfcTessellatedFaceSet]] is a boundary representation topological model limited to planar faces and straight edges. It may represent an approximation of an analytical surface or solid that may be provided in addition to its tessellation as a separate shape representation. The [[IfcTessellatedFaceSet]] provides a compact data representation of an connected face set using indices into ordered lists of vertices, normals, colours, and texture maps. NOTE The compact representation has been chosen to enable small data sets despite potentially large sets of faces, edges and vertices needed to represent tessellations of analyticals surfaces and solids, and despite large sets of colour and texture information to annotate the tessellated faces. The [[IfcTessellatedFaceSet]] is an abstract supertype of tesselated face sets each imposing specific constraints on face generation for tessellation, such as triangulation with or without strip and fans , or quadrilaterals, or polygonal faces with or without inner loops . NOTE Not all different constraints on face sets are included as specific subtypes in this release of the specification. The following attributes apply to all subtypes The Coordinates are the ordered list of Cartesian points representing the vertices of the tessellated item. An index list, defined at the level of subtypes, uses the points, identified by index position, to construct the polylines that represent the faces. The HasColours inverse relation provides an indexed colour map with an corresponding list of indices providing a colour for each face of the tessellated face set. The HasTextures inverse relation provides an indexed texture map with an corresponding list of indices providing texture coordinates that map to the geometric coordinates of the polylines representing the faces. Each face of the tessellated face set shall have at least three non coincident vertices vertices that define a planar polygon vertices that define a non self intersecting polygon. NOTE The definition of [[IfcTessellatedFaceSet]] is based on the indexedFaceSet defined in ISO IEC 19775 1 HISTORY New entity in IFC4. bSI Documentation"

#:IFC.xml:10140
msgid "IfcTessellatedFaceSet_Coordinates"
msgstr "Coordinates"

msgid "IfcTessellatedFaceSet_Coordinates_DEFINITION"
msgstr "Coordinates"

#:IFC.xml:10828
msgid "IfcTessellatedFaceSet_HasColours"
msgstr "HasColours"

msgid "IfcTessellatedFaceSet_HasColours_DEFINITION"
msgstr "HasColours"

#:IFC.xml:10842
msgid "IfcTessellatedFaceSet_HasTextures"
msgstr "HasTextures"

msgid "IfcTessellatedFaceSet_HasTextures_DEFINITION"
msgstr "HasTextures"

#:IFC.xml:10820
msgid "IfcTessellatedFaceSet_Dim"
msgstr "Dim"

msgid "IfcTessellatedFaceSet_Dim_DEFINITION"
msgstr "The space dimensionality of this geometric representation item, it is always 3."

#:IFC.xml:10856
msgid "IfcTessellatedItem"
msgstr "IfcTessellatedItem"

msgid "IfcTessellatedItem_DEFINITION"
msgstr "The [[IfcTessellatedItem]] is the abstract supertype of all tessellated geometric models. HISTORY New entity in IFC4. bSI Documentation"

#:IFC.xml:10859
msgid "IfcTriangulatedFaceSet"
msgstr "IfcTriangulatedFaceSet"

msgid "IfcTriangulatedFaceSet_DEFINITION"
msgstr "The [[IfcTriangulatedFaceSet]] is a tessellated face set with all faces being bound by triangles. The faces are constructed by implicit polylines defined by three Cartesian points. Depending on the value of the attribute Closed the instance of [[IfcTriangulatedFaceSet]] represents if TRUE, a boundary represention or B rep if FALSE, a face based surface representation. The coordinates of each point are provided by a one based index into an ordered list of Cartesian points provided by the two dimensional list CoordIndex , where the first dimension of the two dimensional list addresses the list of triangular faces the second dimension of the two dimensional list provides exactly three indices. Each index points to a Cartesian point being a vertex of the triangle. Depending on the provision of PnIndex the indices point either directly into the [[IfcCartesianPointList3D]] referenced by Coordinates defined at the supertype [[IfcTessellatedFaceSet]] , or they point into the PnIndex where the integer values at that position provides the location of the coordinate values within the [[IfcCartesianPointList3D]] . See Figure 1 for the handling of point index. PnIndex .. .. .. .. .. .. figures ifctriangulatedfaceset 03.png Figure 1 Use of PnIndex See Figure 2 for using the [[IfcTriangulatedFaceSet]] without as default and with using the PnIndex . [[IfcTriangulatedFaceSet]] 01 .. .. .. .. .. .. figures ifctriangulatedfaceset 01.png Figure 2 Triangulated face set Optionally normals can be provided. Only normals per vector are supported allowing for visually curved triangles when the three normals of the corresponding three vertices of a triangle are not co linear to the normal of the triangular face. If they are identical, normals shall be omited. NOTE In case of a body representation having triangular faces with curvature, different normals for all three vertices in context of this triangles are exported, describing the curvature for smooth visualisation. In case of triangular faces with no curvature, the three vertex based normals are identical and could always be computed from the face. Therefore vertices should only be exported to support smooth visualisation by curvature of triangles. In case of faceted representation no vertices should be exported. Normals are provided by the two dimensional list Normals , where the first dimension of the two dimensional list addresses the corresponding list of vertex indices of the triangular faces the second dimension of the two dimensional list provides exactly three real values to determine the direction of the normal at this vertex of the triangle. The indices in the CoordIndex point into the list of Normals . The indices of CoordIndex are applied to both points, either directly directly, or via the PnIndex and normals. See Figure 3 for handling of normals. [[IfcTriangulatedFaceSet]] 02 .. .. .. .. .. .. figures ifctriangulatedfaceset 02.png Figure 3 Triangulated face set with normals NOTE Using corresponding lists of points and normals allows to use only a single list of indices into both at the expense of having non unique collections of vertices. Figure 4 shows the use of [[IfcTriangulatedFaceSet]] without annotation. The diagram of the [[IfcTriangulatedFaceSet]] represents the indices and the ordered list into which the indices point. The index starts with 1 indexed as 1 to N , if the greatest index in CoordIndex in N, then the [[IfcCartesianPointList]] shall have N lists of 3 3 coordinates. Figure 168 shows an [[IfcTriangulatedFaceSet]] represented by CoordIndex 1,6,5 , 1,2,6 , 6,2,7 , 7,2,3 , 7,8,6 , 6,8,5 , 5,8,1 , 1,8,4 , 4,2,1 , 2,4,3 , 4,8,7 , 7,3,4 [[IfcCartesianPointList3D]] 0.,0.,0. , 1.,0.,0. , 1.,1.,0. , 0.,1.,0. , 0.,0.,2. , 1.,0.,2. , 1.,1.,2. , 0.,1.,2. Figure 4 Triangulated face set geometry NOTE The definition of [[IfcTriangulatedFaceSet]] is based on the indexedFaceSet and indexedTriangleSet defined in ISO IEC 19775 1. The use of PnIndex has been adopted from triangulated surface set defined in ISO 10303 42. HISTORY New entity in IFC4. .spec head Informal Propositions 1. If Closed TRUE, the same topological constraints as imposed by an faceted boundary representation shall be safisfied. In particular each face shall be unique each edge shall be used by exactly two boundaries of faces the topological normal at each point on the boundary of the triangulated face set shall point away from the mater ial of the solid. bSI Documentation"

#:IFC.xml:10860
msgid "IfcTriangulatedFaceSet_Normals"
msgstr "Normals"

msgid "IfcTriangulatedFaceSet_Normals_DEFINITION"
msgstr "An ordered list of three directions for normals. It is a two dimensional list of directions provided by three parameter X 0D values. X 0D The first dimension corresponds to the vertex indices of the Coordindex X 0D The second dimension has exactly three values, 1 the x direction, 2 the y direction and 3 the z directions"

#:IFC.xml:10865
msgid "IfcTriangulatedFaceSet_Closed"
msgstr "Closed"

msgid "IfcTriangulatedFaceSet_Closed_DEFINITION"
msgstr "Indication whether the [[IfcTriangulatedFaceSet]] is a closed shell or not. If omited no such information can be provided."

#:IFC.xml:10870
msgid "IfcTriangulatedFaceSet_CoordIndex"
msgstr "CoordIndex"

msgid "IfcTriangulatedFaceSet_CoordIndex_DEFINITION"
msgstr "Two dimensional list for the indexed based triangles, where X 0D The first dimension represents the triangles from 1 to N X 0D The second dimension has exactly three values representing the indices to three vertex points from 1 to 3 . X 0D X 0D NOTE The coordinates of the vertices are provided by the indexed list of SELF [[IfcTessellatedFaceSet]].Coordinates.CoordList ."

#:IFC.xml:10875
msgid "IfcTriangulatedFaceSet_PnIndex"
msgstr "PnIndex"

msgid "IfcTriangulatedFaceSet_PnIndex_DEFINITION"
msgstr "The list of integers defining the locations in the [[IfcCartesianPointList3D]] to obtain the point coordinates for the indices withint the CoordIndex . If the PnIndex is not provided the indices point directly into the [[IfcCartesianPointList3D]] ."

#:IFC.xml:10880
msgid "IfcTriangulatedFaceSet_NumberOfTriangles"
msgstr "NumberOfTriangles"

msgid "IfcTriangulatedFaceSet_NumberOfTriangles_DEFINITION"
msgstr "Derived number of triangles used for this triangulation."

#:IFC.xml:10887
msgid "IfcTriangulatedIrregularNetwork"
msgstr "IfcTriangulatedIrregularNetwork"

msgid "IfcTriangulatedIrregularNetwork_DEFINITION"
msgstr "The [[IfcTriangulatedIrregularNetwork]] is a triangulated face set for representing horizontal surfaces one unique Z coordinate for all X and Y coordinates within domain with additional flags for each face indicating breaklines between faces or designation as a hole or void. Triangles shall be defined with vertices in counterclockwise order as viewing from above following right hand rule . For visualization, applications should not display faces where flags are set as negative either a hole, void, or possible future extension . The flag Void shall be used to indicate that faces are to be excluded without falling back on any other geometry. Such designation could be used for portions of a site beneath a building or other structure. The flag Hole shall be used to indicate that faces are to be excluded but may fall back on other geometry. Such designation could be used for portions of a proposed site that are to remain unchanged conforming to an existing site that may also be defined For scenarios where multiple surfaces used as input are to be combined, any triangles marked Void shall be retained as voids, while any triangles marked as Hole shall be overridden if another surface has visible geometry defined within the same horizontal location. bSI Documentation"

#:IFC.xml:10892
msgid "IfcTriangulatedIrregularNetwork_Flags"
msgstr "Flags"

msgid "IfcTriangulatedIrregularNetwork_Flags_DEFINITION"
msgstr "Indicates attributes of each triangle in a compact form as follows 2 invisible void 1 invisible hole 0 no breaklines 1 breakline at edge 1 2 breakline at edge 2 3 breakline at edges 1 and 2 4 breakline at edge 3 5 breakline at edges 1 and 3 6 breakline at edges 2 and 3 7 breakline at edges 1, 2, and 3."

#:IFC.xml:10899
msgid "IfcBooleanOperand"
msgstr "IfcBooleanOperand"

msgid "IfcBooleanOperand_DEFINITION"
msgstr "Select type including all geometric representation items which may participate in a Boolean operation to form a CSG solid. It includes solid models, half space solids and CSG primitives. Boolean results can also be used as operands thus enabling nested Boolean operations. .extDef NOTE Definition from ISO 10303 42 This select type identifies all those types of entities which may participate in a boolean operation to form a CSG solid. NOTE Corresponding STEP type boolean operand defined in ISO 10303 42. HISTORY New type in IFC1.5.1. .change ifc2x4 IFC4 CHANGE The item [[IfcTessellatedFaceSet]] has been added to the select."

#:IFC.xml:10900
msgid "IfcCsgSelect"
msgstr "IfcCsgSelect"

msgid "IfcCsgSelect_DEFINITION"
msgstr "Select type enabling the choice between [[IfcBooleanResult]] and subtypes of [[IfcCsgPrimitive3D]] as potential root tree expression at [[IfcCsgSolid]] . .extDef NOTE Definition from ISO 10303 42 This type identifies the types of entity which may be selected as the root of a CSG tree including a single CSG primitive as a special case. NOTE Corresponding STEP type csg select defined in ISO 10303 42. HISTORY New type in IFC1.5.1."

#:IFC.xml:10901
msgid "IfcGeometricSetSelect"
msgstr "IfcGeometricSetSelect"

msgid "IfcGeometricSetSelect_DEFINITION"
msgstr "The [[IfcGeometricSetSelect]] includes the geometric representation items applicable to be part of the geometric set. .extDef NOTE Definition from ISO10303 42 This select type identifies the types of entities which can occur in a geometric set. NOTE Corresponding STEP type geometric set select defined in ISO 10303 42. HISTORY New type in IFC2x."

